{"name":"CLAIMS","tagline":"","body":"**CLAIMS** is an in-memory parallel database prototype, which runs on clusters of commodity servers and provides fast data analysis on relational dataset. \r\n\r\n##Highlights\r\n\r\n### 1. **Massively parallel execution engine**.\r\n\r\nCLAIMS relies on highly parallel query processing engine to dramatically accelerate data analysis. Query evaluations are distributed to the clusters and executed in parallel. Furthermore, query evaluations in each node are in a multi-threaded fashion to leverage the computation power of multi-core hardware.  \r\n\r\n### 2. **Smart intra-node parallelism**. \r\n\r\nPipelining the query execution among the clusters could effectively improve the query respond time but its benefits will be discounted if the workloads among execution fragments are imbalanced due to the improper intra-node parallelism. To tackle this problem, a novel elastic pipelining is proposed in CLAIMS to automatically adapt the intra-node parallelism of each query according to the runtime workload. Thanks to elastic pipelining, execution fragments which are detected to the performance bottleneck of the whole query will be given more parallelism to accelerate the data processing, while the execution fragments which are detected to be over-producing will decrease the parallelism to avoid unnecessary computation allocation. \r\n\r\n### 3. **Efficient in-memory data processing**.\r\n\r\nCLAIMS employs a large set of optimization techniques to achieve efficient in-memory data processing, including batch-at-a-time processing, cache-sensitive operator, SIMD-based optimization, code generation, lock-free and concurrent structure. Those optimizations enable CLAIMS to process gigabytes data per second in a single thread.\r\n\r\n### 4. **Network communication optimization**. \r\n\r\nDistributed query processing inevitably involves in network communication, which is usually the performance bottleneck in parallel in-memory databases because of the relatively slow network bandwidth compared with the efficient in-memory data processing throughput. When compiling a user query into an execution plan, CLAIMS query optimizer leverages sophisticated selectivity propagation system and cost model to generate a physical query plan with minimized network communication cost. Furthermore, CLAIMS is equipped with a new data exchange implementation, which offers efficient, scalable and skew-resilient network data communication among CLAIMS instances. Those optimizations greatly improve the response time of the queries which requires network data communication.\r\n\r\n##Team members\r\n\r\n**Minqi Zhou**, an associate professor in East China Normal University, leads this team.\r\n\r\n[Li Wang](https://github.com/wangli1426), an Ph.D. student in East China Normal University, is responsible for designing and implementing the key components of CLAIMS, including query optimizer, catalog, physical operators, distributed communication infrastructure, storage layout, etc.\r\n\r\n**Lei Zhang** is responsible for designing and implementing query optimizer, physical operators, persistent data exchange, storage management, etc.\r\n\r\n**Shaochan Dong** is responsible for designing and implementing in-memory index and index management, as well as data loading and importing.\r\n\r\n**Xinzhou Zhang** is mainly responsible for web UI design and implementing data importing model.\r\n\r\n**Zhuhe Fang** is mainly responsible for designing and implementing SQL DML parser and physical operators.\r\n\r\n**Yu Kai** is mainly responsible for designing and implementing SQL DDL parser, catalog persistence.\r\n\r\n**Yongfeng Li** was a formal member of CLAIMS, who participated in designing and implementing catalog model.\r\n\r\n**Lin Gu** is responsible for designing the demo cases of CLAIMS.\r\n\r\n##Publications\r\n1. Li Wang, Minqi Zhou, Zhenjie Zhang, Yin Yang, Ming-chien Shan, Aoying Zhou. Elastic Pipelining in In-Memory Database Cluster. Submitted to SIGMOD 2015.\r\n2. Li Wang, Minqi Zhou, Zhenjie Zhang, Ming-chien Shan, Aoying Zhou. NUMA-aware Scalable and Efficient Aggregation on Large Domains. Accepted by TKDE.\r\n3. Li Wang, Lei Zhang, Chengcheng Yu, Aoying Zhou. Optimizing Pipelined Execution for Distributed In-memory OLAY System. In: DaMen 2014. Springer. 2014. pp. 35-56.\r\n\r\n### setup steps:\r\n```\r\n1. ./build.sh init\r\n2. configure --prefix=/your/install/path \r\n3. make\r\n4. make install\r\n```\r\n\r\n### cleanup steps:\r\n```\r\n1. make distclean\r\n1. build.sh clean\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}