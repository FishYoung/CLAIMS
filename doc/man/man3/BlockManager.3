.TH "BlockManager" 3 "Thu Nov 12 2015" "Claims" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BlockManager \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <BlockManager\&.h>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBBlockInfo\fP"
.br
.ti -1c
.RI "class \fBBlockManagerWorkerActor\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBstorageLevel\fP { \fBmemory\fP, \fBdisk\fP, \fBoffline\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMemoryChunkStore\fP * \fBgetMemoryChunkStore\fP () const "
.br
.ti -1c
.RI "virtual \fB~BlockManager\fP ()"
.br
.ti -1c
.RI "void \fBinitialize\fP ()"
.br
.ti -1c
.RI "void \fBregisterToMaster\fP (\fBBlockManagerId\fP *blockManagerId)"
.br
.ti -1c
.RI "void \fBheartBeat\fP ()"
.br
.ti -1c
.RI "void \fBasyncReregister\fP ()"
.br
.ti -1c
.RI "void \fBreregister\fP ()"
.br
.ti -1c
.RI "void \fBreportAllBlocks\fP ()"
.br
.ti -1c
.RI "bool \fBreportBlockStatus\fP (string blockId)"
.br
.ti -1c
.RI "bool \fBtryToReportBlockStatus\fP (string blockId)"
.br
.ti -1c
.RI "void \fBget\fP (string blockId)"
.br
.ti -1c
.RI "void * \fBgetLocal\fP (string blockId)"
.br
.ti -1c
.RI "\fBChunkInfo\fP \fBloadFromHdfs\fP (string file_name)"
.br
.ti -1c
.RI "int \fBloadFromHdfs\fP (const \fBChunkID\fP &, void *const &desc, const unsigned &)"
.br
.ti -1c
.RI "int \fBloadFromDisk\fP (const \fBChunkID\fP &, void *const &desc, const unsigned &) const "
.br
.ti -1c
.RI "bool \fBput\fP (string blockId, \fBstorageLevel\fP level, void *value)"
.br
.ti -1c
.RI "\fBBlockManagerId\fP * \fBgetId\fP ()"
.br
.ti -1c
.RI "string \fBaskForMatch\fP (string filename, \fBBlockManagerId\fP bmi)"
.br
.ti -1c
.RI "bool \fBcontainsPartition\fP (const \fBPartitionID\fP &part) const "
.br
.ti -1c
.RI "bool \fBaddPartition\fP (const \fBPartitionID\fP &, const unsigned &number_of_chunks, const \fBStorageLevel\fP &desirable_storage_level)"
.br
.ti -1c
.RI "bool \fBremovePartition\fP (const \fBPartitionID\fP &)"
.br
.ti -1c
.RI "\fBPartitionStorage\fP * \fBgetPartitionHandle\fP (const \fBPartitionID\fP &partition_id) const "
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBBlockManager\fP * \fBgetInstance\fP ()"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBBlockManager\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "map< string, \fBBlockInfo\fP * > \fBblockInfoPool_\fP"
.br
.ti -1c
.RI "\fBBlockManagerWorkerActor\fP * \fBworker_\fP"
.br
.ti -1c
.RI "\fBBlockManagerId\fP * \fBblockManagerId_\fP"
.br
.ti -1c
.RI "\fBMemoryChunkStore\fP * \fBmemstore_\fP"
.br
.ti -1c
.RI "\fBDiskStore\fP * \fBdiskstore_\fP"
.br
.ti -1c
.RI "map< string, string > \fBfile_proj_\fP"
.br
.ti -1c
.RI "Theron::Framework * \fBframework_\fP"
.br
.ti -1c
.RI "Theron::Actor * \fBactor_\fP"
.br
.ti -1c
.RI "boost::unordered_map
.br
< \fBPartitionID\fP, 
.br
\fBPartitionStorage\fP * > \fBpartition_id_to_storage_\fP"
.br
.ti -1c
.RI "\fBLogging\fP * \fBlogging_\fP"
.br
.ti -1c
.RI "\fBLock\fP \fBlock\fP"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static \fBBlockManager\fP * \fBblockmanager_\fP =0"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBBlockManagerWorkerActor\fP"
.br
.in -1c
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBBlockManager::storageLevel\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fImemory \fP\fP
.TP
\fB\fIdisk \fP\fP
.TP
\fB\fIoffline \fP\fP
.SH "Constructor & Destructor Documentation"
.PP 
.SS "BlockManager::~BlockManager ()\fC [virtual]\fP"

.PP
References actor_, blockmanager_, framework_, logging_, and memstore_\&.
.SS "BlockManager::BlockManager ()\fC [private]\fP"

.PP
References actor_, BlockManagerWorkerActor, framework_, Environment::getInstance(), MemoryChunkStore::getInstance(), Environment::getNodeID(), logging_, and memstore_\&.
.PP
Referenced by getInstance()\&.
.SH "Member Function Documentation"
.PP 
.SS "bool BlockManager::addPartition (const \fBPartitionID\fP &partition_id, const unsigned &number_of_chunks, const \fBStorageLevel\fP &desirable_storage_level)"

.PP
References PartitionID::getName(), Logging::log(), logging_, and partition_id_to_storage_\&.
.SS "string BlockManager::askForMatch (stringfilename, \fBBlockManagerId\fPbmi)"

.PP
References BlockManager::BlockManagerWorkerActor::_askformatch(), file_proj_, and worker_\&.
.SS "void BlockManager::asyncReregister ()"

.PP
Referenced by reportBlockStatus()\&.
.SS "bool BlockManager::containsPartition (const \fBPartitionID\fP &part) const"

.PP
References partition_id_to_storage_\&.
.SS "void BlockManager::get (stringblockId)"

.PP
References getLocal()\&.
.SS "\fBBlockManagerId\fP * BlockManager::getId ()"

.PP
References blockManagerId_\&.
.SS "\fBBlockManager\fP * BlockManager::getInstance ()\fC [static]\fP"

.PP
References BlockManager(), and blockmanager_\&.
.PP
Referenced by ChunkStorage::createChunkReaderIterator(), Environment::initializeStorage(), bottomLayerCollecting::Open(), claims::physical_operator::PhysicalProjectionScan::Open(), IndexScanIterator::Open(), and projection_scan()\&.
.SS "void * BlockManager::getLocal (stringblockId)"

.PP
References blockInfoPool_, disk, MemoryChunkStore::getChunk(), ChunkInfo::hook, loadFromHdfs(), memory, memstore_, and put()\&.
.PP
Referenced by get()\&.
.SS "\fBMemoryChunkStore\fP * BlockManager::getMemoryChunkStore () const"

.PP
References memstore_\&.
.PP
Referenced by ChunkStorage::createChunkReaderIterator()\&.
.SS "\fBPartitionStorage\fP * BlockManager::getPartitionHandle (const \fBPartitionID\fP &partition_id) const"

.PP
References partition_id_to_storage_\&.
.PP
Referenced by projection_scan()\&.
.SS "void BlockManager::heartBeat ()"

.PP
References BlockManager::BlockManagerWorkerActor::_sendHeartBeat(), reregister(), and worker_\&.
.PP
Referenced by initialize()\&.
.SS "void BlockManager::initialize ()"
the version written by zhanglei///////////////////////////////// 
.PP
References blockManagerId_, disk, DISKDIR, diskstore_, BufferManager::getInstance(), Environment::getInstance(), MemoryChunkStore::getInstance(), Environment::getNodeID(), Environment::getResourceManagerSlave(), BufferManager::getStorageMemoryBudegeInMilibyte(), heartBeat(), memory, memstore_, registerToMaster(), and InstanceResourceManager::ReportStorageBudget()\&.
.PP
Referenced by Environment::initializeStorage()\&.
.SS "int BlockManager::loadFromDisk (const \fBChunkID\fP &chunk_id, void *const &desc, const unsigned &length) const"

.PP
References ChunkID::chunk_off, CHUNK_SIZE, Logging::elog(), FileClose(), FileOpen, PartitionID::getPathAndName(), Logging::log(), logging_, and ChunkID::partition_id\&.
.PP
Referenced by ChunkStorage::createChunkReaderIterator()\&.
.SS "\fBChunkInfo\fP BlockManager::loadFromHdfs (stringfile_name)"

.PP
References CHUNK_SIZE, Config::hdfs_master_ip, Config::hdfs_master_port, and ChunkInfo::hook\&.
.PP
Referenced by ChunkStorage::createChunkReaderIterator(), and getLocal()\&.
.SS "int BlockManager::loadFromHdfs (const \fBChunkID\fP &chunk_id, void *const &desc, const unsigned &length)"

.PP
References Lock::acquire(), ChunkID::chunk_off, CHUNK_SIZE, Logging::elog(), PartitionID::getPathAndName(), Config::hdfs_master_ip, Config::hdfs_master_port, lock, Logging::log(), logging_, ChunkID::partition_id, and Lock::release()\&.
.SS "bool BlockManager::put (stringblockId, \fBstorageLevel\fPlevel, void *value)"

.PP
References blockInfoPool_, disk, diskstore_, memory, memstore_, DiskStore::putValue(), MemoryChunkStore::putValue(), and reportBlockStatus()\&.
.PP
Referenced by getLocal()\&.
.SS "void BlockManager::registerToMaster (\fBBlockManagerId\fP *blockManagerId)"

.PP
References BlockManager::BlockManagerWorkerActor::_reigisterToMaster(), and worker_\&.
.PP
Referenced by initialize()\&.
.SS "bool BlockManager::removePartition (const \fBPartitionID\fP &partition_id)"

.PP
References Logging::elog(), PartitionID::getName(), logging_, and partition_id_to_storage_\&.
.SS "void BlockManager::reportAllBlocks ()"

.PP
Referenced by reregister()\&.
.SS "bool BlockManager::reportBlockStatus (stringblockId)"

.PP
References asyncReregister(), and tryToReportBlockStatus()\&.
.PP
Referenced by put()\&.
.SS "void BlockManager::reregister ()"

.PP
References reportAllBlocks()\&.
.PP
Referenced by heartBeat()\&.
.SS "bool BlockManager::tryToReportBlockStatus (stringblockId)"

.PP
References BlockManager::BlockManagerWorkerActor::_reportBlockStatus(), and worker_\&.
.PP
Referenced by reportBlockStatus()\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class \fBBlockManagerWorkerActor\fP\fC [friend]\fP"

.PP
Referenced by BlockManager()\&.
.SH "Member Data Documentation"
.PP 
.SS "Theron::Actor* BlockManager::actor_\fC [private]\fP"

.PP
Referenced by BlockManager(), and ~BlockManager()\&.
.SS "map<string, \fBBlockInfo\fP*> BlockManager::blockInfoPool_\fC [private]\fP"

.PP
Referenced by getLocal(), and put()\&.
.SS "\fBBlockManager\fP * BlockManager::blockmanager_ =0\fC [static]\fP, \fC [private]\fP"

.PP
Referenced by getInstance(), and ~BlockManager()\&.
.SS "\fBBlockManagerId\fP* BlockManager::blockManagerId_\fC [private]\fP"

.PP
Referenced by getId(), and initialize()\&.
.SS "\fBDiskStore\fP* BlockManager::diskstore_\fC [private]\fP"

.PP
Referenced by initialize(), and put()\&.
.SS "map<string, string> BlockManager::file_proj_\fC [private]\fP"

.PP
Referenced by askForMatch()\&.
.SS "Theron::Framework* BlockManager::framework_\fC [private]\fP"

.PP
Referenced by BlockManager(), and ~BlockManager()\&.
.SS "\fBLock\fP BlockManager::lock\fC [private]\fP"

.PP
Referenced by loadFromHdfs()\&.
.SS "\fBLogging\fP* BlockManager::logging_\fC [private]\fP"

.PP
Referenced by addPartition(), BlockManager(), loadFromDisk(), loadFromHdfs(), removePartition(), and ~BlockManager()\&.
.SS "\fBMemoryChunkStore\fP* BlockManager::memstore_\fC [private]\fP"

.PP
Referenced by BlockManager(), getLocal(), getMemoryChunkStore(), initialize(), put(), and ~BlockManager()\&.
.SS "boost::unordered_map<\fBPartitionID\fP,\fBPartitionStorage\fP*> BlockManager::partition_id_to_storage_\fC [private]\fP"

.PP
Referenced by addPartition(), containsPartition(), getPartitionHandle(), and removePartition()\&.
.SS "\fBBlockManagerWorkerActor\fP* BlockManager::worker_\fC [private]\fP"

.PP
Referenced by askForMatch(), heartBeat(), registerToMaster(), and tryToReportBlockStatus()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Claims from the source code\&.
