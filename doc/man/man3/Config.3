.TH "Config" 3 "Thu Nov 12 2015" "Claims" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Config \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Config\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBprint_configure\fP () const "
.br
.ti -1c
.RI "virtual \fB~Config\fP ()"
.br
.ti -1c
.RI "void \fBprint_configure\fP () const "
.br
.ti -1c
.RI "virtual \fB~Config\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBConfig\fP * \fBgetInstance\fP ()"
.br
.ti -1c
.RI "static \fBConfig\fP * \fBgetInstance\fP ()"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static std::string \fBconfig_file\fP"
.br
.ti -1c
.RI "static std::string \fBdata_dir\fP"
.br
.ti -1c
.RI "static int \fBmax_degree_of_parallelism\fP"
.br
.ti -1c
.RI "static int \fBinitial_degree_of_parallelism\fP"
.br
.ti -1c
.RI "static bool \fBenable_expander_adaptivity\fP"
.br
.ti -1c
.RI "static int \fBexpander_adaptivity_check_frequency\fP"
.br
.ti -1c
.RI "static int \fBscan_batch\fP"
.br
.ti -1c
.RI "static std::string \fBhdfs_master_ip\fP"
.br
.ti -1c
.RI "static int \fBhdfs_master_port\fP"
.br
.ti -1c
.RI "static std::string \fBlogfile\fP"
.br
.ti -1c
.RI "static bool \fBmaster\fP"
.br
.ti -1c
.RI "static bool \fBlocal_disk_mode\fP"
.br
.ti -1c
.RI "static bool \fBpipelined_exchange\fP"
.br
.ti -1c
.RI "static int \fBclient_listener_port\fP"
.br
.ti -1c
.RI "static bool \fBenable_codegen\fP"
.br
.ti -1c
.RI "static std::string \fBcatalog_file\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBConfig\fP ()"
.br
.ti -1c
.RI "void \fBinitialize\fP ()"
.br
.ti -1c
.RI "std::string \fBgetString\fP (std::string attribute_name, std::string default_value)"
.br
.ti -1c
.RI "int \fBgetInt\fP (std::string attribute_name, int default_value)"
.br
.ti -1c
.RI "bool \fBgetBoolean\fP (std::string attribute_name, bool defalut_value)"
.br
.ti -1c
.RI "\fBConfig\fP ()"
.br
.ti -1c
.RI "void \fBinitialize\fP ()"
.br
.ti -1c
.RI "std::string \fBgetString\fP (std::string attribute_name, std::string default_value)"
.br
.ti -1c
.RI "int \fBgetInt\fP (std::string attribute_name, int default_value)"
.br
.ti -1c
.RI "bool \fBgetBoolean\fP (std::string attribute_name, bool defalut_value)"
.br
.in -1c
.SS "Static Private Member Functions"

.in +1c
.ti -1c
.RI "static void \fBsetConfigFile\fP (std::string file_name)"
.br
.ti -1c
.RI "static void \fBsetConfigFile\fP (std::string file_name)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "libconfig::Config \fBcfg\fP"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static \fBConfig\fP * \fBinstance_\fP = 0"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class maintains all the parameter values, which are specified in 'config' file\&. In the debug version, in the initialization phase, default values are usded in case that the value is not given in 'config' file\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Config::~Config ()\fC [virtual]\fP"

.SS "Config::Config ()\fC [private]\fP"

.SS "virtual Config::~Config ()\fC [virtual]\fP"

.SS "Config::Config ()\fC [private]\fP"

.SH "Member Function Documentation"
.PP 
.SS "bool Config::getBoolean (std::stringattribute_name, booldefalut_value)\fC [private]\fP"
Get the configured boolean value specified by 'attribute_name'\&. Return 'default_vale' if the 'attribute_name' is not found in the configure file\&. true=1, false=0\&. 
.SS "bool Config::getBoolean (std::stringattribute_name, booldefalut_value)\fC [private]\fP"
Get the configured boolean value specified by 'attribute_name'\&. Return 'default_vale' if the 'attribute_name' is not found in the configure file\&. true=1, false=0\&. 
.SS "static \fBConfig\fP* Config::getInstance ()\fC [static]\fP"

.SS "\fBConfig\fP * Config::getInstance ()\fC [static]\fP"

.PP
Referenced by Environment::Environment(), fill_basic_hash_table(), main(), main_aaa(), PerformanceInfo::PerformanceInfo(), PerformanceInfo::processed_one_block(), and startup_single_node_environment_of_poc()\&.
.SS "int Config::getInt (std::stringattribute_name, intdefault_value)\fC [private]\fP"
Get the configured integer value specified by 'attribute_name'\&. Return 'default_vale' if the 'attribute_name' is not found in the configure file\&. 
.SS "int Config::getInt (std::stringattribute_name, intdefault_value)\fC [private]\fP"
Get the configured integer value specified by 'attribute_name'\&. Return 'default_vale' if the 'attribute_name' is not found in the configure file\&. 
.SS "std::string Config::getString (std::stringattribute_name, std::stringdefault_value)\fC [private]\fP"
Get the configured string value specified by 'attribute_name'\&. Return 'default_vale' if the 'attribute_name' is not found in the configure file\&. 
.SS "std::string Config::getString (std::stringattribute_name, std::stringdefault_value)\fC [private]\fP"
Get the configured string value specified by 'attribute_name'\&. Return 'default_vale' if the 'attribute_name' is not found in the configure file\&. 
.SS "void Config::initialize ()\fC [private]\fP"

.SS "void Config::initialize ()\fC [private]\fP"
open configure file, which path is specified in CONFIG\&.
.PP
References get_default_logfile_name(), and gete()\&.
.SS "void Config::print_configure () const"

.SS "void Config::print_configure () const"

.PP
Referenced by main()\&.
.SS "void Config::setConfigFile (std::stringfile_name)\fC [static]\fP, \fC [private]\fP"

.SS "static void Config::setConfigFile (std::stringfile_name)\fC [static]\fP, \fC [private]\fP"

.SH "Member Data Documentation"
.PP 
.SS "static std::string Config::catalog_file\fC [static]\fP"

.PP
Referenced by handle_parameters(), Catalog::restoreCatalog(), and Catalog::saveCatalog()\&.
.SS "libconfig::Config Config::cfg\fC [private]\fP"

.SS "static int Config::client_listener_port\fC [static]\fP"

.PP
Referenced by Environment::initializeClientListener()\&.
.SS "static std::string Config::config_file\fC [static]\fP"

.PP
Referenced by PortManager::getConfigure(), handle_parameters(), Coordinator::PrepareTheSocket(), Environment::readConfigFile(), and AdaptiveEndPoint::SayHelloToCoordinator()\&.
.SS "static std::string Config::data_dir\fC [static]\fP"
parameter values\&. Note: these values are static, so that they can be accessed directly, like \fBConfig::data_dir\fP\&. Static value must be defined in *\&.cpp file, otherwise compiler will complain\&. 
.PP
Referenced by PartitionID::getPathAndName(), and handle_parameters()\&.
.SS "static bool Config::enable_codegen\fC [static]\fP"

.PP
Referenced by handle_parameters(), claims::physical_operator::PhysicalFilter::Open(), and claims::physical_operator::PhysicalHashJoin::Open()\&.
.SS "static bool Config::enable_expander_adaptivity\fC [static]\fP"

.PP
Referenced by handle_parameters(), ExpanderTracker::monitoringThread(), and scalability_test()\&.
.SS "static int Config::expander_adaptivity_check_frequency\fC [static]\fP"

.PP
Referenced by handle_parameters(), and ExpanderTracker::monitoringThread()\&.
.SS "static std::string Config::hdfs_master_ip\fC [static]\fP"

.PP
Referenced by HDFSChunkReaderIterator::HDFSChunkReaderIterator(), HdfsConnector::HdfsConnector(), and BlockManager::loadFromHdfs()\&.
.SS "static int Config::hdfs_master_port\fC [static]\fP"

.PP
Referenced by HDFSChunkReaderIterator::HDFSChunkReaderIterator(), HdfsConnector::HdfsConnector(), and BlockManager::loadFromHdfs()\&.
.SS "static int Config::initial_degree_of_parallelism\fC [static]\fP"
This parameter sets the initial degree of parallelism for each segment\&. 
.PP
Referenced by claims::logical_operator::LogicalCrossJoin::GenerateChildPhysicalQueryPlan(), claims::logical_operator::LogicalQueryPlanRoot::GetPhysicalPlan(), claims::logical_operator::LogicalEqualJoin::GetPhysicalPlan(), claims::logical_operator::LogicalSort::GetPhysicalPlan(), claims::logical_operator::LogicalAggregation::GetPhysicalPlan(), handle_parameters(), and scalability_test()\&.
.SS "static \fBConfig\fP * Config::instance_ = 0\fC [static]\fP, \fC [private]\fP"

.SS "static bool Config::local_disk_mode\fC [static]\fP"

.PP
Referenced by HdfsLoader::append(), ChunkStorage::createChunkReaderIterator(), and HdfsLoader::load()\&.
.SS "static std::string Config::logfile\fC [static]\fP"

.PP
Referenced by main(), and main_aaa()\&.
.SS "static bool Config::master\fC [static]\fP"

.PP
Referenced by main(), and startup_single_node_environment_of_poc()\&.
.SS "static int Config::max_degree_of_parallelism\fC [static]\fP"
This parameter specifies the maximum degrees of parallelism for each expander\&. 
.PP
Referenced by ExpanderTracker::decideExpandingOrShrinking(), ExpanderTracker::expandeIfNotExceedTheMaxDegreeOfParallelism(), handle_parameters(), in_segment_scalability_test_on_poc(), in_segment_scalability_test_on_tpch(), PerformanceInfo::PerformanceInfo(), PerformanceInfo::processed_one_block(), and scalability_test()\&.
.SS "static bool Config::pipelined_exchange\fC [static]\fP"
THis parameter determines whether the data transmission in data exchanges is pipelined\&. 
.PP
Referenced by claims::physical_operator::ExchangeMerger::SerializeAndSendPlan()\&.
.SS "static int Config::scan_batch\fC [static]\fP"

.PP
Referenced by claims::physical_operator::PhysicalProjectionScan::Next()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Claims from the source code\&.
