.TH "BlockManagerMaster" 3 "Thu Nov 12 2015" "Claims" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BlockManagerMaster \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <BlockManagerMaster\&.h>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBBlockInfo\fP"
.br
.ti -1c
.RI "class \fBBlockManagerMasterActor\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBstorageLevel\fP { \fBmemory\fP, \fBdisk\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~BlockManagerMaster\fP ()"
.br
.ti -1c
.RI "void \fBinitialize\fP ()"
.br
.ti -1c
.RI "void \fBtestForPoc\fP ()"
.br
.ti -1c
.RI "bool \fBSendBindingMessage\fP (const \fBPartitionID\fP &, const unsigned &number_of_chunks, const \fBStorageLevel\fP &, const \fBNodeID\fP &) const "
.br
.ti -1c
.RI "bool \fBSendUnbindingMessage\fP (const \fBPartitionID\fP &partition_id, \fBNodeID\fP &target) const "
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBBlockManagerMaster\fP * \fBgetInstance\fP ()"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBBlockManagerMaster\fP ()"
.br
.ti -1c
.RI "std::string \fBgenerateSlaveActorName\fP (const \fBNodeID\fP &) const "
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBAllBlockInfo\fP * \fBabi_\fP"
.br
.ti -1c
.RI "\fBBlanceMatcher\fP * \fBbm_\fP"
.br
.ti -1c
.RI "Theron::Framework * \fBframework_\fP"
.br
.ti -1c
.RI "\fBBlockManagerMasterActor\fP * \fBactor_\fP"
.br
.ti -1c
.RI "\fBLogging\fP * \fBlogging_\fP"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static \fBBlockManagerMaster\fP * \fBmaster_\fP =0"
.br
.in -1c
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBBlockManagerMaster::storageLevel\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fImemory \fP\fP
.TP
\fB\fIdisk \fP\fP
.SH "Constructor & Destructor Documentation"
.PP 
.SS "BlockManagerMaster::~BlockManagerMaster ()\fC [virtual]\fP"

.PP
References actor_, framework_, logging_, and master_\&.
.SS "BlockManagerMaster::BlockManagerMaster ()\fC [private]\fP"

.PP
References actor_, framework_, Environment::getInstance(), and logging_\&.
.PP
Referenced by getInstance()\&.
.SH "Member Function Documentation"
.PP 
.SS "std::string BlockManagerMaster::generateSlaveActorName (const \fBNodeID\fP &node_id) const\fC [private]\fP"

.PP
Referenced by SendBindingMessage(), and SendUnbindingMessage()\&.
.SS "static \fBBlockManagerMaster\fP* BlockManagerMaster::getInstance ()\fC [inline]\fP, \fC [static]\fP"

.PP
References BlockManagerMaster(), and master_\&.
.PP
Referenced by ProjectionBinding::BindingEntireProjection(), Environment::initializeStorage(), ProjectionBinding::UnbindingEntireProjection(), and Partitioner::UpdatePartitionWithNumberOfChunksToBlockManager()\&.
.SS "void BlockManagerMaster::initialize ()"

.PP
References abi_, AllBlockInfo::getInstance(), and testForPoc()\&.
.PP
Referenced by Environment::initializeStorage()\&.
.SS "bool BlockManagerMaster::SendBindingMessage (const \fBPartitionID\fP &partition_id, const unsigned &number_of_chunks, const \fBStorageLevel\fP &desirable_storage_level, const \fBNodeID\fP &target) const"

.PP
References Logging::elog(), framework_, generateSlaveActorName(), NodeTracker::GetInstance(), Environment::getInstance(), Logging::log(), logging_, and TimeOutReceiver::TimeOutWait()\&.
.PP
Referenced by ProjectionBinding::BindingEntireProjection(), and Partitioner::UpdatePartitionWithNumberOfChunksToBlockManager()\&.
.SS "bool BlockManagerMaster::SendUnbindingMessage (const \fBPartitionID\fP &partition_id, \fBNodeID\fP &target) const"

.PP
References Logging::elog(), framework_, generateSlaveActorName(), NodeTracker::GetInstance(), Environment::getInstance(), Logging::log(), logging_, and TimeOutReceiver::TimeOutWait()\&.
.PP
Referenced by ProjectionBinding::UnbindingEntireProjection()\&.
.SS "void BlockManagerMaster::testForPoc ()"

.PP
References bm_, BlanceMatcher::getInstance(), and BlanceMatcher::projectsInput()\&.
.PP
Referenced by initialize()\&.
.SH "Member Data Documentation"
.PP 
.SS "\fBAllBlockInfo\fP* BlockManagerMaster::abi_\fC [private]\fP"

.PP
Referenced by initialize()\&.
.SS "\fBBlockManagerMasterActor\fP* BlockManagerMaster::actor_\fC [private]\fP"

.PP
Referenced by BlockManagerMaster(), and ~BlockManagerMaster()\&.
.SS "\fBBlanceMatcher\fP* BlockManagerMaster::bm_\fC [private]\fP"

.PP
Referenced by testForPoc()\&.
.SS "Theron::Framework* BlockManagerMaster::framework_\fC [private]\fP"

.PP
Referenced by BlockManagerMaster(), SendBindingMessage(), SendUnbindingMessage(), and ~BlockManagerMaster()\&.
.SS "\fBLogging\fP* BlockManagerMaster::logging_\fC [private]\fP"

.PP
Referenced by BlockManagerMaster(), SendBindingMessage(), SendUnbindingMessage(), and ~BlockManagerMaster()\&.
.SS "\fBBlockManagerMaster\fP * BlockManagerMaster::master_ =0\fC [static]\fP, \fC [private]\fP"

.PP
Referenced by getInstance(), and ~BlockManagerMaster()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Claims from the source code\&.
