.TH "decimal::NValue" 3 "Thu Nov 12 2015" "Claims" \" -*- nroff -*-
.ad l
.nh
.SH NAME
decimal::NValue \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <NValue\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBNValue\fP ()"
.br
.ti -1c
.RI "void \fBcreateDecimalFromString\fP (const std::string &txt)"
.br
.ti -1c
.RI "std::string \fBcreateStringFromDecimal\fP (unsigned number_of_fractinal_digits=12) const "
.br
.ti -1c
.RI "\fBNValue\fP \fBopMultiplyDecimals\fP (const \fBNValue\fP &lhs, const \fBNValue\fP &rhs) const "
.br
.ti -1c
.RI "\fBNValue\fP \fBopDivideDecimals\fP (const \fBNValue\fP lhs, const \fBNValue\fP rhs) const "
.br
.ti -1c
.RI "bool \fBisNull\fP () const "
.br
.ti -1c
.RI "void \fBserializeToExport\fP (\fBExportSerializeOutput\fP &, void *para=0) const "
.br
.ti -1c
.RI "\fBNValue\fP \fBop_add\fP (const \fBNValue\fP rhs) const "
.br
.ti -1c
.RI "\fBNValue\fP \fBop_subtract\fP (const \fBNValue\fP rhs) const "
.br
.ti -1c
.RI "\fBNValue\fP \fBop_multiply\fP (const \fBNValue\fP rhs) const "
.br
.ti -1c
.RI "\fBNValue\fP \fBop_divide\fP (const \fBNValue\fP rhs) const "
.br
.ti -1c
.RI "\fBNValue\fP \fBop_max\fP (const \fBNValue\fP rhs) const "
.br
.ti -1c
.RI "\fBNValue\fP \fBop_min\fP (const \fBNValue\fP rhs) const "
.br
.ti -1c
.RI "bool \fBop_equals\fP (const \fBNValue\fP rhs) const "
.br
.ti -1c
.RI "bool \fBop_not_equals\fP (const \fBNValue\fP rhs) const "
.br
.ti -1c
.RI "bool \fBop_less\fP (const \fBNValue\fP rhs) const "
.br
.ti -1c
.RI "bool \fBop_less_equals\fP (const \fBNValue\fP rhs) const "
.br
.ti -1c
.RI "bool \fBop_great\fP (const \fBNValue\fP rhs) const "
.br
.ti -1c
.RI "bool \fBop_great_equals\fP (const \fBNValue\fP rhs) const "
.br
.ti -1c
.RI "int \fBcompare\fP (const \fBNValue\fP rhs) const "
.br
.ti -1c
.RI "\fBTTInt\fP & \fBgetDecimal\fP ()"
.br
.ti -1c
.RI "const \fBTTInt\fP & \fBgetDecimal\fP () const "
.br
.ti -1c
.RI "\fBNValue\fP \fBopAddDecimals\fP (const \fBNValue\fP lhs, const \fBNValue\fP rhs) const "
.br
.ti -1c
.RI "\fBNValue\fP \fBopSubtractDecimals\fP (const \fBNValue\fP lhs, const \fBNValue\fP rhs) const "
.br
.ti -1c
.RI "int \fBcompareDecimalValue\fP (const \fBNValue\fP rhs) const "
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBNValue\fP \fBgetDecimalValueFromString\fP (const std::string &value)"
.br
.ti -1c
.RI "static \fBNValue\fP \fBgetDecimalValue\fP (\fBTTInt\fP value)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "char \fBm_data\fP [16]"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const int64_t \fBkMaxScaleFactor\fP = 1000000000000"
.br
.ti -1c
.RI "static const uint16_t \fBkMaxDecScale\fP = 12"
.br
.ti -1c
.RI "static \fBTTInt\fP \fBs_maxDecimalValue\fP"
.br
.ti -1c
.RI "static \fBTTInt\fP \fBs_minDecimalValue\fP"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "decimal::NValue::NValue ()\fC [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "int decimal::NValue::compare (const \fBNValue\fPrhs) const\fC [inline]\fP"

.SS "int decimal::NValue::compareDecimalValue (const \fBNValue\fPrhs) const\fC [inline]\fP"
Get the type of the value\&. This information is private to prevent code outside of \fBNValue\fP from branching based on the type of a value\&. 
.PP
References getDecimal(), VALUE_COMPARE_EQUAL, VALUE_COMPARE_GREATERTHAN, and VALUE_COMPARE_LESSTHAN\&.
.SS "void decimal::NValue::createDecimalFromString (const std::string &txt)"
set a decimal value from a serialized representation Check for invalid characters
.PP
References ttmath::Int< value_size >::SetSign()\&.
.PP
Referenced by getDecimalValueFromString(), and TEST_F()\&.
.SS "std::string decimal::NValue::createStringFromDecimal (unsignednumber_of_fractinal_digits = \fC12\fP) const"
Serialize sign and value using radix point (no exponent)\&. 
.PP
References ttmath::Int< value_size >::ChangeSign(), ttmath::Int< value_size >::IsSign(), and ttmath::Int< value_size >::ToString()\&.
.PP
Referenced by opAddDecimals(), opDivideDecimals(), opMultiplyDecimals(), opSubtractDecimals(), test_add(), and test_multiple()\&.
.SS "\fBTTInt\fP& decimal::NValue::getDecimal ()\fC [inline]\fP"

.PP
Referenced by compareDecimalValue(), getDecimalValue(), opAddDecimals(), opDivideDecimals(), opMultiplyDecimals(), and opSubtractDecimals()\&.
.SS "const \fBTTInt\fP& decimal::NValue::getDecimal () const\fC [inline]\fP"

.SS "static \fBNValue\fP decimal::NValue::getDecimalValue (\fBTTInt\fPvalue)\fC [inline]\fP, \fC [static]\fP"

.PP
References getDecimal()\&.
.SS "static \fBNValue\fP decimal::NValue::getDecimalValueFromString (const std::string &value)\fC [inline]\fP, \fC [static]\fP"

.PP
References createDecimalFromString()\&.
.SS "bool decimal::NValue::isNull () const\fC [inline]\fP"

.PP
References OBJECT_NULL_BIT, and ttmath::Int< value_size >::SetMin()\&.
.PP
Referenced by opAddDecimals(), opDivideDecimals(), opMultiplyDecimals(), and opSubtractDecimals()\&.
.SS "\fBNValue\fP decimal::NValue::op_add (const \fBNValue\fPrhs) const\fC [inline]\fP"

.PP
Referenced by add_in_same_type()\&.
.SS "\fBNValue\fP decimal::NValue::op_divide (const \fBNValue\fPrhs) const\fC [inline]\fP"

.SS "bool decimal::NValue::op_equals (const \fBNValue\fPrhs) const\fC [inline]\fP"

.PP
References compare()\&.
.PP
Referenced by compare_equal_in_same_type(), claims::common::decimal_to_boolean(), decimal_to_boolean(), great< NValue *, NValue * >(), OperateDecimal::greate(), OperateDecimal::less(), and NValueEqual()\&.
.SS "bool decimal::NValue::op_great (const \fBNValue\fPrhs) const\fC [inline]\fP"

.PP
References compare()\&.
.PP
Referenced by compare_great_in_same_type(), and NValueGreat()\&.
.SS "bool decimal::NValue::op_great_equals (const \fBNValue\fPrhs) const\fC [inline]\fP"

.PP
References compare()\&.
.PP
Referenced by compare_great_equal_in_same_type(), and NValueGreatEqual()\&.
.SS "bool decimal::NValue::op_less (const \fBNValue\fPrhs) const\fC [inline]\fP"

.PP
References compare()\&.
.PP
Referenced by compare_less_in_same_type(), and NValueLess()\&.
.SS "bool decimal::NValue::op_less_equals (const \fBNValue\fPrhs) const\fC [inline]\fP"

.PP
References compare()\&.
.PP
Referenced by compare_less_equal_in_same_type(), and NValueLessEqual()\&.
.SS "\fBNValue\fP decimal::NValue::op_max (const \fBNValue\fPrhs) const\fC [inline]\fP"

.PP
References compare()\&.
.PP
Referenced by great< NValue *, NValue * >()\&.
.SS "\fBNValue\fP decimal::NValue::op_min (const \fBNValue\fPrhs) const\fC [inline]\fP"

.PP
References compare()\&.
.PP
Referenced by OperateDecimal::greate(), and OperateDecimal::less()\&.
.SS "\fBNValue\fP decimal::NValue::op_multiply (const \fBNValue\fPrhs) const\fC [inline]\fP"

.PP
Referenced by muls_in_same_type()\&.
.SS "bool decimal::NValue::op_not_equals (const \fBNValue\fPrhs) const\fC [inline]\fP"

.PP
References compare()\&.
.PP
Referenced by compare_not_equal_in_same_type(), get_boolean_expr(), and NValueNotEqual()\&.
.SS "\fBNValue\fP decimal::NValue::op_subtract (const \fBNValue\fPrhs) const\fC [inline]\fP"

.PP
Referenced by mins_in_same_type()\&.
.SS "\fBNValue\fP decimal::NValue::opAddDecimals (const \fBNValue\fPlhs, const \fBNValue\fPrhs) const\fC [inline]\fP"

.PP
References createStringFromDecimal(), getDecimal(), isNull(), and ttmath::Int< value_size >::SetMin()\&.
.SS "\fBNValue\fP decimal::NValue::opDivideDecimals (const \fBNValue\fPlhs, const \fBNValue\fPrhs) const"

.PP
References createStringFromDecimal(), ttmath::Int< value_size >::Div(), ttmath::Int< value_size >::FromInt(), getDecimal(), isNull(), ttmath::Int< value_size >::SetMin(), and ttmath::Int< value_size >::ToString()\&.
.SS "\fBNValue\fP decimal::NValue::opMultiplyDecimals (const \fBNValue\fP &lhs, const \fBNValue\fP &rhs) const"

.PP
References createStringFromDecimal(), ttmath::Int< value_size >::FromInt(), getDecimal(), isNull(), ttmath::Int< value_size >::SetMin(), and ttmath::Int< value_size >::ToString()\&.
.SS "\fBNValue\fP decimal::NValue::opSubtractDecimals (const \fBNValue\fPlhs, const \fBNValue\fPrhs) const\fC [inline]\fP"

.PP
References createStringFromDecimal(), getDecimal(), isNull(), and ttmath::Int< value_size >::SetMin()\&.
.SS "void decimal::NValue::serializeToExport (\fBExportSerializeOutput\fP &io, void *para = \fC0\fP) const\fC [inline]\fP"

.PP
References decimal::ExportSerializeOutput::writeBinaryString()\&.
.SH "Member Data Documentation"
.PP 
.SS "const uint16_t decimal::NValue::kMaxDecScale = 12\fC [static]\fP"

.SS "const int64_t decimal::NValue::kMaxScaleFactor = 1000000000000\fC [static]\fP"

.SS "char decimal::NValue::m_data[16]"
16 bytes of storage for \fBNValue\fP data\&. 
.SS "\fBTTInt\fP decimal::NValue::s_maxDecimalValue\fC [static]\fP"

.SS "\fBTTInt\fP decimal::NValue::s_minDecimalValue\fC [static]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Claims from the source code\&.
