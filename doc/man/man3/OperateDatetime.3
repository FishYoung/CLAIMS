.TH "OperateDatetime" 3 "Thu Nov 12 2015" "Claims" \" -*- nroff -*-
.ad l
.nh
.SH NAME
OperateDatetime \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <data_type\&.h>\fP
.PP
Inherits \fBOperate\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBOperateDatetime\fP (bool _nullable=true)"
.br
.ti -1c
.RI "void \fBassignment\fP (const void *const &src, void *const &desc) const "
.br
.ti -1c
.RI "std::string \fBtoString\fP (void *value)"
.br
.ti -1c
.RI "void \fBtoValue\fP (void *target, const char *string)"
.br
.ti -1c
.RI "bool \fBequal\fP (const void *const &a, const void *const &b) const "
.br
.ti -1c
.RI "bool \fBless\fP (const void *&a, const void *&b) const "
.br
.ti -1c
.RI "bool \fBgreate\fP (const void *&a, const void *&b) const "
.br
.ti -1c
.RI "int \fBcompare\fP (const void *a, const void *b) const "
.br
.ti -1c
.RI "void \fBadd\fP (void *target, void *increment)"
.br
.ti -1c
.RI "void \fBmultiple\fP (void *target, void *increment)"
.br
.ti -1c
.RI "\fBfun\fP \fBGetADDFunction\fP ()"
.br
.ti -1c
.RI "\fBfun\fP \fBGetMINFunction\fP ()"
.br
.ti -1c
.RI "\fBfun\fP \fBGetMAXFunction\fP ()"
.br
.ti -1c
.RI "\fBfun\fP \fBGetIncreateByOneFunction\fP ()"
.br
.ti -1c
.RI "\fBfun\fP \fBGetAVGFunction\fP ()"
.br
.ti -1c
.RI "unsigned \fBgetPartitionValue\fP (const void *key, const \fBPartitionFunction\fP *partition_function) const "
.br
.ti -1c
.RI "unsigned \fBgetPartitionValue\fP (const void *key, const unsigned long &mod) const "
.br
.ti -1c
.RI "unsigned \fBgetPartitionValue\fP (const void *key) const "
.br
.ti -1c
.RI "\fBOperate\fP * \fBduplicateOperator\fP () const "
.br
.ti -1c
.RI "bool \fBsetNull\fP (void *value)"
.br
.ti -1c
.RI "bool \fBisNull\fP (void *value) const "
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Constructor & Destructor Documentation"
.PP 
.SS "OperateDatetime::OperateDatetime (bool_nullable = \fCtrue\fP)\fC [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "void OperateDatetime::add (void *target, void *increment)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBOperate\fP\&.
.PP
References ADD_FUNC< ptime * >()\&.
.SS "void OperateDatetime::assignment (const void *const &src, void *const &desc) const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBOperate\fP\&.
.SS "int OperateDatetime::compare (const void *a, const void *b) const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBOperate\fP\&.
.SS "\fBOperate\fP* OperateDatetime::duplicateOperator () const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBOperate\fP\&.
.SS "bool OperateDatetime::equal (const void *const &a, const void *const &b) const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBOperate\fP\&.
.SS "\fBfun\fP OperateDatetime::GetADDFunction ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBOperate\fP\&.
.PP
References ADD_FUNC< ptime * >()\&.
.SS "\fBfun\fP OperateDatetime::GetAVGFunction ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBOperate\fP\&.
.SS "\fBfun\fP OperateDatetime::GetIncreateByOneFunction ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBOperate\fP\&.
.SS "\fBfun\fP OperateDatetime::GetMAXFunction ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBOperate\fP\&.
.SS "\fBfun\fP OperateDatetime::GetMINFunction ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBOperate\fP\&.
.SS "unsigned OperateDatetime::getPartitionValue (const void *key, const \fBPartitionFunction\fP *partition_function) const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBOperate\fP\&.
.SS "unsigned OperateDatetime::getPartitionValue (const void *key, const unsigned long &mod) const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBOperate\fP\&.
.PP
References hash_value()\&.
.SS "unsigned OperateDatetime::getPartitionValue (const void *key) const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBOperate\fP\&.
.PP
References hash_value()\&.
.SS "bool OperateDatetime::greate (const void *&a, const void *&b) const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBOperate\fP\&.
.SS "bool OperateDatetime::isNull (void *value) const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBOperate\fP\&.
.SS "bool OperateDatetime::less (const void *&a, const void *&b) const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBOperate\fP\&.
.SS "void OperateDatetime::multiple (void *target, void *increment)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBOperate\fP\&.
.SS "bool OperateDatetime::setNull (void *value)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBOperate\fP\&.
.PP
References NULL_DATETIME\&.
.SS "std::string OperateDatetime::toString (void *value)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBOperate\fP\&.
.SS "void OperateDatetime::toValue (void *target, const char *string)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBOperate\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Claims from the source code\&.
