.TH "ttmath" 3 "Thu Nov 12 2015" "Claims" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ttmath \- 
.PP
a namespace for the TTMath library  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBInt\fP"
.br
.RI "\fI\fBInt\fP implements a big integer value with a sign\&. \fP"
.ti -1c
.RI "class \fBMisc\fP"
.br
.ti -1c
.RI "struct \fBConv\fP"
.br
.ti -1c
.RI "class \fBStopCalculating\fP"
.br
.ti -1c
.RI "class \fBExceptionInfo\fP"
.br
.ti -1c
.RI "class \fBReferenceError\fP"
.br
.ti -1c
.RI "class \fBRuntimeError\fP"
.br
.ti -1c
.RI "class \fBUInt\fP"
.br
.RI "\fI\fBUInt\fP implements a big integer value without a sign\&. \fP"
.ti -1c
.RI "class \fBUInt< 0 >\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef unsigned int \fBuint\fP"
.br
.ti -1c
.RI "typedef signed int \fBsint\fP"
.br
.ti -1c
.RI "typedef unsigned long long int \fBulint\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBLibTypeCode\fP { \fBasm_vc_32\fP = 0, \fBasm_gcc_32\fP, \fBasm_vc_64\fP, \fBasm_gcc_64\fP, \fBno_asm_32\fP, \fBno_asm_64\fP }"
.br
.ti -1c
.RI "enum \fBErrorCode\fP { \fBerr_ok\fP = 0, \fBerr_nothing_has_read\fP, \fBerr_unknown_character\fP, \fBerr_unexpected_final_bracket\fP, \fBerr_stack_not_clear\fP, \fBerr_unknown_variable\fP, \fBerr_division_by_zero\fP, \fBerr_interrupt\fP, \fBerr_overflow\fP, \fBerr_unknown_function\fP, \fBerr_unknown_operator\fP, \fBerr_unexpected_semicolon_operator\fP, \fBerr_improper_amount_of_arguments\fP, \fBerr_improper_argument\fP, \fBerr_unexpected_end\fP, \fBerr_internal_error\fP, \fBerr_incorrect_name\fP, \fBerr_incorrect_value\fP, \fBerr_variable_exists\fP, \fBerr_variable_loop\fP, \fBerr_functions_loop\fP, \fBerr_must_be_only_one_value\fP, \fBerr_object_exists\fP, \fBerr_unknown_object\fP, \fBerr_still_calculating\fP, \fBerr_in_short_form_used_function\fP, \fBerr_percent_from\fP }"
.br
.in -1c
.SH "Detailed Description"
.PP 
a namespace for the TTMath library 
.SH "Typedef Documentation"
.PP 
.SS "typedef signed int \fBttmath::sint\fP"

.SS "typedef unsigned int \fBttmath::uint\fP"
on 32bit platforms one word (uint, sint) will be equal 32bits 
.SS "typedef unsigned long long int \fBttmath::ulint\fP"
this type is twice bigger than uint (64bit on a 32bit platforms)
.PP
although C++ Standard - ANSI ISO IEC 14882:2003 doesn't define such a type (long long) but it is defined in C99 and in upcoming C++0x /3\&.9\&.1 (2)/ and many compilers support it
.PP
this type is used in \fBUInt::MulTwoWords\fP and \fBUInt::DivTwoWords\fP when macro TTMATH_NOASM is defined but only on a 32bit platform 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBttmath::ErrorCode\fP"
error codes 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIerr_ok \fP\fP
.TP
\fB\fIerr_nothing_has_read \fP\fP
.TP
\fB\fIerr_unknown_character \fP\fP
.TP
\fB\fIerr_unexpected_final_bracket \fP\fP
.TP
\fB\fIerr_stack_not_clear \fP\fP
.TP
\fB\fIerr_unknown_variable \fP\fP
.TP
\fB\fIerr_division_by_zero \fP\fP
.TP
\fB\fIerr_interrupt \fP\fP
.TP
\fB\fIerr_overflow \fP\fP
.TP
\fB\fIerr_unknown_function \fP\fP
.TP
\fB\fIerr_unknown_operator \fP\fP
.TP
\fB\fIerr_unexpected_semicolon_operator \fP\fP
.TP
\fB\fIerr_improper_amount_of_arguments \fP\fP
.TP
\fB\fIerr_improper_argument \fP\fP
.TP
\fB\fIerr_unexpected_end \fP\fP
.TP
\fB\fIerr_internal_error \fP\fP
.TP
\fB\fIerr_incorrect_name \fP\fP
.TP
\fB\fIerr_incorrect_value \fP\fP
.TP
\fB\fIerr_variable_exists \fP\fP
.TP
\fB\fIerr_variable_loop \fP\fP
.TP
\fB\fIerr_functions_loop \fP\fP
.TP
\fB\fIerr_must_be_only_one_value \fP\fP
.TP
\fB\fIerr_object_exists \fP\fP
.TP
\fB\fIerr_unknown_object \fP\fP
.TP
\fB\fIerr_still_calculating \fP\fP
.TP
\fB\fIerr_in_short_form_used_function \fP\fP
.TP
\fB\fIerr_percent_from \fP\fP
.SS "enum \fBttmath::LibTypeCode\fP"
lib type codes: asm_vc_32 - with asm code designed for Microsoft Visual C++ (32 bits) asm_gcc_32 - with asm code designed for GCC (32 bits) asm_vc_64 - with asm for VC (64 bit) asm_gcc_64 - with asm for GCC (64 bit) no_asm_32 - pure C++ version (32 bit) - without any asm code no_asm_64 - pure C++ version (64 bit) - without any asm code 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIasm_vc_32 \fP\fP
.TP
\fB\fIasm_gcc_32 \fP\fP
.TP
\fB\fIasm_vc_64 \fP\fP
.TP
\fB\fIasm_gcc_64 \fP\fP
.TP
\fB\fIno_asm_32 \fP\fP
.TP
\fB\fIno_asm_64 \fP\fP
.SH "Author"
.PP 
Generated automatically by Doxygen for Claims from the source code\&.
