.TH "Json::PathArgument" 3 "Thu Nov 12 2015" "Claims" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Json::PathArgument \- 
.PP
Experimental and untested: represents an element of the 'path' to access a node\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <json\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPathArgument\fP ()"
.br
.ti -1c
.RI "\fBPathArgument\fP (\fBArrayIndex\fP index)"
.br
.ti -1c
.RI "\fBPathArgument\fP (const char *key)"
.br
.ti -1c
.RI "\fBPathArgument\fP (const std::string &key)"
.br
.in -1c
.SS "Private Types"

.in +1c
.ti -1c
.RI "enum \fBKind\fP { \fBkindNone\fP = 0, \fBkindIndex\fP, \fBkindKey\fP }"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "std::string \fBkey_\fP"
.br
.ti -1c
.RI "\fBArrayIndex\fP \fBindex_\fP"
.br
.ti -1c
.RI "\fBKind\fP \fBkind_\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBPath\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Experimental and untested: represents an element of the 'path' to access a node\&. 
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBJson::PathArgument::Kind\fP\fC [private]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIkindNone \fP\fP
.TP
\fB\fIkindIndex \fP\fP
.TP
\fB\fIkindKey \fP\fP
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Json::PathArgument::PathArgument ()"

.SS "Json::PathArgument::PathArgument (\fBArrayIndex\fPindex)"

.SS "Json::PathArgument::PathArgument (const char *key)"

.SS "Json::PathArgument::PathArgument (const std::string &key)"

.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class \fBPath\fP\fC [friend]\fP"

.SH "Member Data Documentation"
.PP 
.SS "\fBArrayIndex\fP Json::PathArgument::index_\fC [private]\fP"

.PP
Referenced by Json::Path::make(), and Json::Path::resolve()\&.
.SS "std::string Json::PathArgument::key_\fC [private]\fP"

.PP
Referenced by Json::Path::make(), and Json::Path::resolve()\&.
.SS "\fBKind\fP Json::PathArgument::kind_\fC [private]\fP"

.PP
Referenced by Json::Path::make(), and Json::Path::resolve()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Claims from the source code\&.
