.TH "PartitionFunction" 3 "Thu Nov 12 2015" "Claims" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PartitionFunction \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <hash\&.h>\fP
.PP
Inherited by \fBBoostHashFunctin\fP, \fBGeneralModuloFunction\fP, \fBModuloHashFunction\fP, \fBRoundRobinPartitionFunction\fP, and \fBUniformRangePartitionFunction\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBPartitionStyle\fP { \fBhash_f\fP, \fBrange_f\fP, \fBround_robin_f\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPartitionFunction\fP ()"
.br
.ti -1c
.RI "\fBPartitionFunction\fP (int min, int max, unsigned int k)"
.br
.ti -1c
.RI "virtual \fB~PartitionFunction\fP ()"
.br
.ti -1c
.RI "virtual \fBPartitionStyle\fP \fBgetPartitionFashion\fP () const =0"
.br
.ti -1c
.RI "virtual unsigned int \fBget_partition_value\fP (const int &value) const =0"
.br
.ti -1c
.RI "virtual unsigned int \fBget_partition_value\fP (const double &value) const =0"
.br
.ti -1c
.RI "virtual unsigned int \fBget_partition_value\fP (const unsigned long &) const =0"
.br
.ti -1c
.RI "virtual unsigned int \fBgetNumberOfPartitions\fP () const =0"
.br
.ti -1c
.RI "bool \fBequal\fP (\fBPartitionFunction\fP *function_) const "
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "template<class Archive > void \fBserialize\fP (Archive &ar, const unsigned int version)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "int \fBmin_\fP"
.br
.ti -1c
.RI "int \fBmax_\fP"
.br
.ti -1c
.RI "unsigned long int \fBk_\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBboost::serialization::access\fP"
.br
.in -1c
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBPartitionFunction::PartitionStyle\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIhash_f \fP\fP
.TP
\fB\fIrange_f \fP\fP
.TP
\fB\fIround_robin_f \fP\fP
.SH "Constructor & Destructor Documentation"
.PP 
.SS "PartitionFunction::PartitionFunction ()\fC [inline]\fP"
Creates a new hashing object, rounding the number of buckets \fIk\fP to the next power of two\&. Formally \fIk\fP will become $ k = 2^{\lceil{\log_2{k}}\rceil} $ 
.PP
\fBParameters:\fP
.RS 4
\fImin\fP Minimum hash value 
.br
\fImax\fP Maximum hash value 
.br
\fIk\fP Number of buckets\&. Value will be rounded to the next higher power of two\&. 
.RE
.PP

.SS "PartitionFunction::PartitionFunction (intmin, intmax, unsigned intk)"

.PP
References getlogarithm(), and k_\&.
.SS "virtual PartitionFunction::~PartitionFunction ()\fC [inline]\fP, \fC [virtual]\fP"

.SH "Member Function Documentation"
.PP 
.SS "bool PartitionFunction::equal (\fBPartitionFunction\fP *function_) const"

.PP
References getNumberOfPartitions(), and getPartitionFashion()\&.
.PP
Referenced by claims::logical_operator::Requirement::requireNetworkTransfer()\&.
.SS "virtual unsigned int PartitionFunction::get_partition_value (const int &value) const\fC [pure virtual]\fP"
Returns the bucket number $n\in[0,k)$ for this \fIvalue\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP Value to hash\&. Must be within bounds\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Bucket number\&. 
.RE
.PP

.PP
Implemented in \fBBoostHashFunctin\fP, \fBGeneralModuloFunction\fP, \fBModuloHashFunction\fP, \fBUniformRangePartitionFunction\fP, and \fBRoundRobinPartitionFunction\fP\&.
.PP
Referenced by OperateInt::getPartitionValue(), OperateFloat::getPartitionValue(), OperateDouble::getPartitionValue(), OperateULong::getPartitionValue(), OperateSmallInt::getPartitionValue(), OperateUSmallInt::getPartitionValue(), OperateDecimal::getPartitionValue(), and OperateBool::getPartitionValue()\&.
.SS "virtual unsigned int PartitionFunction::get_partition_value (const double &value) const\fC [pure virtual]\fP"

.PP
Implemented in \fBBoostHashFunctin\fP, \fBGeneralModuloFunction\fP, \fBModuloHashFunction\fP, \fBUniformRangePartitionFunction\fP, and \fBRoundRobinPartitionFunction\fP\&.
.SS "virtual unsigned int PartitionFunction::get_partition_value (const unsigned long &) const\fC [pure virtual]\fP"

.PP
Implemented in \fBBoostHashFunctin\fP, \fBGeneralModuloFunction\fP, \fBModuloHashFunction\fP, \fBUniformRangePartitionFunction\fP, and \fBRoundRobinPartitionFunction\fP\&.
.SS "virtual unsigned int PartitionFunction::getNumberOfPartitions () const\fC [pure virtual]\fP"

.PP
Implemented in \fBBoostHashFunctin\fP, \fBGeneralModuloFunction\fP, \fBModuloHashFunction\fP, \fBUniformRangePartitionFunction\fP, and \fBRoundRobinPartitionFunction\fP\&.
.PP
Referenced by equal(), Partitioner::getNumberOfPartitions(), claims::logical_operator::LogicalScan::GetOptimalPhysicalPlan(), claims::logical_operator::LogicalFilter::GetOptimalPhysicalPlan(), claims::logical_operator::LogicalQueryPlanRoot::GetOptimalPhysicalPlan(), insert_into_hash_table(), and insert_into_hash_table_from_projection()\&.
.SS "virtual \fBPartitionStyle\fP PartitionFunction::getPartitionFashion () const\fC [pure virtual]\fP"

.PP
Implemented in \fBBoostHashFunctin\fP, \fBGeneralModuloFunction\fP, \fBModuloHashFunction\fP, \fBUniformRangePartitionFunction\fP, and \fBRoundRobinPartitionFunction\fP\&.
.PP
Referenced by equal(), Partitioner::getPartitionFashion(), and claims::logical_operator::PlanPartitioner::GetPartitionStyle()\&.
.SS "template<class Archive > void PartitionFunction::serialize (Archive &ar, const unsigned intversion)\fC [inline]\fP, \fC [protected]\fP"

.PP
References k_, max_, and min_\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class boost::serialization::access\fC [friend]\fP"

.SH "Member Data Documentation"
.PP 
.SS "unsigned long int PartitionFunction::k_\fC [protected]\fP"
$ \_k=log_2(k) $, where $k$ is number of buckets 
.PP
Referenced by UniformRangePartitionFunction::get_partition_value(), ModuloHashFunction::get_partition_value(), UniformRangePartitionFunction::getNumberOfPartitions(), ModuloHashFunction::getNumberOfPartitions(), ModuloHashFunction::ModuloHashFunction(), PartitionFunction(), and serialize()\&.
.SS "int PartitionFunction::max_\fC [protected]\fP"

.PP
Referenced by UniformRangePartitionFunction::get_partition_value(), and serialize()\&.
.SS "int PartitionFunction::min_\fC [protected]\fP"

.PP
Referenced by UniformRangePartitionFunction::get_partition_value(), ModuloHashFunction::get_partition_value(), and serialize()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Claims from the source code\&.
