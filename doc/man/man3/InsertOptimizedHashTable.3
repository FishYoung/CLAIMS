.TH "InsertOptimizedHashTable" 3 "Thu Nov 12 2015" "Claims" \" -*- nroff -*-
.ad l
.nh
.SH NAME
InsertOptimizedHashTable \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <InsertOptimizedHashTable\&.h>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBbucket\fP"
.br
.ti -1c
.RI "class \fBBucketIterator\fP"
.br
.ti -1c
.RI "struct \fBentry\fP"
.br
.ti -1c
.RI "struct \fBmeta_data\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBInsertOptimizedHashTable\fP (unsigned nbuckets)"
.br
.ti -1c
.RI "void \fBinitialize\fP ()"
.br
.ti -1c
.RI "virtual \fB~InsertOptimizedHashTable\fP ()"
.br
.ti -1c
.RI "void \fBinsertBlock\fP (\fBBlockStreamBase\fP *block)"
.br
.ti -1c
.RI "void \fBinsertEntry\fP (unsigned bn, \fBentry\fP &\fBentry\fP)"
.br
.ti -1c
.RI "\fBBucketIterator\fP \fBcreateBucketIterator\fP (unsigned bn)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "std::vector< \fBBlockStreamBase\fP * > \fBblock_list_\fP"
.br
.ti -1c
.RI "\fBSpineLock\fP \fBblock_list_lock_\fP"
.br
.ti -1c
.RI "\fBbucket\fP * \fBbuckets_\fP"
.br
.ti -1c
.RI "unsigned \fBnbuckets_\fP"
.br
.ti -1c
.RI "const unsigned long \fBhash_value_mask\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBBucketIterator\fP"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "InsertOptimizedHashTable::InsertOptimizedHashTable (unsignednbuckets)"

.SS "InsertOptimizedHashTable::~InsertOptimizedHashTable ()\fC [virtual]\fP"

.PP
References block_list_, buckets_, InsertOptimizedHashTable::bucket::head, nbuckets_, and InsertOptimizedHashTable::meta_data::next\&.
.SH "Member Function Documentation"
.PP 
.SS "\fBBucketIterator\fP InsertOptimizedHashTable::createBucketIterator (unsignedbn)\fC [inline]\fP"

.PP
References BucketIterator, and buckets_\&.
.PP
Referenced by fill_insert_optimized_hash_table(), and TEST()\&.
.SS "void InsertOptimizedHashTable::initialize ()"

.PP
References buckets_, and nbuckets_\&.
.PP
Referenced by insert_into_insert_optimized_hash_table(), and TEST()\&.
.SS "void InsertOptimizedHashTable::insertBlock (\fBBlockStreamBase\fP *block)"
Insert a block stream into the hash table block list\&. It is the responsibility of hash table for possible space allocation and release\&. If the block is a reference, a new referenced block will be created\&. Otherwise, a new block will be allocated with desirable block size and apply deep copy to create a new block\&. 
.PP
References SpineLock::acquire(), block_list_, block_list_lock_, BlockStreamBase::createBlockAndDeepCopy(), and SpineLock::release()\&.
.PP
Referenced by insert_into_insert_optimized_hash_table(), and TEST()\&.
.SS "void InsertOptimizedHashTable::insertEntry (unsignedbn, \fBentry\fP &entry)"

.PP
References SpineLock::acquire(), InsertOptimizedHashTable::bucket::allocate_new_entry(), buckets_, InsertOptimizedHashTable::bucket::entrys, InsertOptimizedHashTable::bucket::has_space_for_new_entry(), InsertOptimizedHashTable::bucket::head, InsertOptimizedHashTable::meta_data::lock, InsertOptimizedHashTable::meta_data::next, SpineLock::release(), and InsertOptimizedHashTable::meta_data::tuple_count\&.
.PP
Referenced by insert_into_insert_optimized_hash_table(), and TEST()\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class \fBBucketIterator\fP\fC [friend]\fP"

.PP
Referenced by createBucketIterator()\&.
.SH "Member Data Documentation"
.PP 
.SS "std::vector<\fBBlockStreamBase\fP*> InsertOptimizedHashTable::block_list_\fC [protected]\fP"

.PP
Referenced by insertBlock(), and ~InsertOptimizedHashTable()\&.
.SS "\fBSpineLock\fP InsertOptimizedHashTable::block_list_lock_\fC [protected]\fP"

.PP
Referenced by insertBlock()\&.
.SS "\fBbucket\fP* InsertOptimizedHashTable::buckets_\fC [protected]\fP"

.PP
Referenced by createBucketIterator(), initialize(), insertEntry(), and ~InsertOptimizedHashTable()\&.
.SS "const unsigned long InsertOptimizedHashTable::hash_value_mask\fC [protected]\fP"

.SS "unsigned InsertOptimizedHashTable::nbuckets_\fC [protected]\fP"

.PP
Referenced by initialize(), and ~InsertOptimizedHashTable()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Claims from the source code\&.
