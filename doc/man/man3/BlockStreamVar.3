.TH "BlockStreamVar" 3 "Thu Nov 12 2015" "Claims" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BlockStreamVar \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <BlockStream\&.h>\fP
.PP
Inherits \fBBlockStreamBase\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBtail_info\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBBlockStreamVar\fP (unsigned \fBblock_size\fP, const \fBSchema\fP *const &schema)"
.br
.ti -1c
.RI "virtual \fB~BlockStreamVar\fP ()"
.br
.ti -1c
.RI "void * \fBgetTuple\fP (unsigned offset) const "
.br
.ti -1c
.RI "void * \fBallocateTuple\fP (unsigned bytes)"
.br
.ti -1c
.RI "bool \fBinsert\fP (void *dest, void *src, unsigned bytes)"
.br
.ti -1c
.RI "bool \fBserialize\fP (\fBBlock\fP &block) const "
.br
.ti -1c
.RI "void \fBconstructFromBlock\fP (const \fBBlock\fP &block)"
.br
.ti -1c
.RI "bool \fBinsert\fP (void *dest, void *src)"
.br
.ti -1c
.RI "void \fBsetEmpty\fP ()"
.br
.ti -1c
.RI "bool \fBdeserialize\fP (\fBBlock\fP *block)"
.br
.ti -1c
.RI "void \fBtoDisk\fP (\fBBlockStreamBase\fP *bsb, string path)"
.br
.ti -1c
.RI "void \fBprintSchema\fP ()"
.br
.ti -1c
.RI "bool \fBEmpty\fP () const "
.br
.ti -1c
.RI "bool \fBFull\fP () const "
.br
.ti -1c
.RI "void * \fBgetBlockDataAddress\fP ()"
.br
.ti -1c
.RI "bool \fBswitchBlock\fP (\fBBlockStreamBase\fP &block)"
.br
.ti -1c
.RI "void \fBcopyBlock\fP (void *addr, unsigned length)"
.br
.ti -1c
.RI "void \fBdeepCopy\fP (const \fBBlock\fP *block)"
.br
.ti -1c
.RI "unsigned \fBgetSerializedBlockSize\fP () const "
.br
.ti -1c
.RI "unsigned \fBgetBlockCapacityInTuples\fP () const "
.br
.ti -1c
.RI "unsigned \fBgetTuplesInBlock\fP () const "
.br
.ti -1c
.RI "\fBBlockStreamBase\fP * \fBcreateBlockAndDeepCopy\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "const \fBSchema\fP * \fBschema_\fP"
.br
.ti -1c
.RI "unsigned \fBattributes_\fP"
.br
.ti -1c
.RI "unsigned \fBvar_attributes_\fP"
.br
.ti -1c
.RI "char * \fBfree_front_\fP"
.br
.ti -1c
.RI "char * \fBfree_end_\fP"
.br
.ti -1c
.RI "unsigned \fBcur_tuple_size_\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Constructor & Destructor Documentation"
.PP 
.SS "BlockStreamVar::BlockStreamVar (unsignedblock_size, const \fBSchema\fP *const &schema)"

.PP
References attributes_, Schema::columns, free_end_, free_front_, Schema::getncolumns(), Block::start, t_double, t_float, t_int, t_string, t_u_long, and var_attributes_\&.
.SS "virtual BlockStreamVar::~BlockStreamVar ()\fC [inline]\fP, \fC [virtual]\fP"

.SH "Member Function Documentation"
.PP 
.SS "void * BlockStreamVar::allocateTuple (unsignedbytes)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBBlockStreamBase\fP\&.
.PP
References free_end_, and free_front_\&.
.SS "void BlockStreamVar::constructFromBlock (const \fBBlock\fP &block)\fC [virtual]\fP"

.PP
Implements \fBBlockStreamBase\fP\&.
.PP
References attributes_, Block::BlockSize, free_end_, free_front_, Block::getBlock(), Block::getsize(), and Block::start\&.
.SS "void BlockStreamVar::copyBlock (void *addr, unsignedlength)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBBlockStreamBase\fP\&.
.SS "\fBBlockStreamBase\fP * BlockStreamVar::createBlockAndDeepCopy ()\fC [virtual]\fP"

.PP
Implements \fBBlockStreamBase\fP\&.
.SS "void BlockStreamVar::deepCopy (const \fBBlock\fP *block)\fC [inline]\fP, \fC [virtual]\fP"
deep copy from block, including block content and member variables that maintain the block status\&. the user should guarantee that rest block and desc block are of equal derived class type(e\&.g\&., both are \fBBlockStreamFix\fP), otherwise the copy may be incomplete\&. 
.PP
Implements \fBBlockStreamBase\fP\&.
.SS "bool BlockStreamVar::deserialize (\fBBlock\fP *block)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBBlockStreamBase\fP\&.
.SS "bool BlockStreamVar::Empty () const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBBlockStreamBase\fP\&.
.SS "bool BlockStreamVar::Full () const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBBlockStreamBase\fP\&.
.SS "unsigned BlockStreamVar::getBlockCapacityInTuples () const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBBlockStreamBase\fP\&.
.SS "void* BlockStreamVar::getBlockDataAddress ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBBlockStreamBase\fP\&.
.SS "unsigned BlockStreamVar::getSerializedBlockSize () const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBBlockStreamBase\fP\&.
.SS "void * BlockStreamVar::getTuple (unsignedoffset) const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBBlockStreamBase\fP\&.
.PP
References attributes_, Block::BlockSize, free_end_, free_front_, and Block::start\&.
.SS "unsigned BlockStreamVar::getTuplesInBlock () const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBBlockStreamBase\fP\&.
.SS "bool BlockStreamVar::insert (void *dest, void *src, unsignedbytes)\fC [virtual]\fP"

.PP
Implements \fBBlockStreamBase\fP\&.
.PP
References cur_tuple_size_, free_end_, free_front_, and Block::start\&.
.SS "bool BlockStreamVar::insert (void *dest, void *src)\fC [inline]\fP"

.SS "void BlockStreamVar::printSchema ()\fC [inline]\fP"

.SS "bool BlockStreamVar::serialize (\fBBlock\fP &block) const\fC [virtual]\fP"

.PP
Implements \fBBlockStreamBase\fP\&.
.PP
References Block::BlockSize, cur_tuple_size_, Block::getBlock(), Block::getsize(), Block::start, and BlockStreamVar::tail_info::tuple_count\&.
.SS "void BlockStreamVar::setEmpty ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBBlockStreamBase\fP\&.
.SS "bool BlockStreamVar::switchBlock (\fBBlockStreamBase\fP &block)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Implements \fBBlockStreamBase\fP\&.
.SS "void BlockStreamVar::toDisk (\fBBlockStreamBase\fP *bsb, stringpath)\fC [inline]\fP"

.PP
References FileOpen, and Block::getBlock()\&.
.SH "Member Data Documentation"
.PP 
.SS "unsigned BlockStreamVar::attributes_\fC [private]\fP"

.PP
Referenced by BlockStreamVar(), constructFromBlock(), and getTuple()\&.
.SS "unsigned BlockStreamVar::cur_tuple_size_\fC [private]\fP"

.PP
Referenced by insert(), and serialize()\&.
.SS "char* BlockStreamVar::free_end_\fC [private]\fP"

.PP
Referenced by allocateTuple(), BlockStreamVar(), constructFromBlock(), getTuple(), and insert()\&.
.SS "char* BlockStreamVar::free_front_\fC [private]\fP"

.PP
Referenced by allocateTuple(), BlockStreamVar(), constructFromBlock(), getTuple(), and insert()\&.
.SS "const \fBSchema\fP* BlockStreamVar::schema_\fC [private]\fP"

.SS "unsigned BlockStreamVar::var_attributes_\fC [private]\fP"

.PP
Referenced by BlockStreamVar()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Claims from the source code\&.
