.TH "IDsGenerator" 3 "Thu Nov 12 2015" "Claims" \" -*- nroff -*-
.ad l
.nh
.SH NAME
IDsGenerator \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <IDsGenerator\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~IDsGenerator\fP ()"
.br
.ti -1c
.RI "unsigned long long int \fBgenerateUniqueExchangeID\fP ()"
.br
.ti -1c
.RI "\fBExpanderID\fP \fBgetUniqueExpanderID\fP ()"
.br
.ti -1c
.RI "virtual \fB~IDsGenerator\fP ()"
.br
.ti -1c
.RI "unsigned long long int \fBgenerateUniqueExchangeID\fP ()"
.br
.ti -1c
.RI "\fBExpanderID\fP \fBgetUniqueExpanderID\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBIDsGenerator\fP * \fBgetInstance\fP ()"
.br
.ti -1c
.RI "static \fBIDsGenerator\fP * \fBgetInstance\fP ()"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBIDsGenerator\fP ()"
.br
.ti -1c
.RI "\fBIDsGenerator\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "unsigned long long int \fBexchange_id_cursor_\fP"
.br
.ti -1c
.RI "\fBExpanderID\fP \fBexpander_id_cursor_\fP"
.br
.ti -1c
.RI "\fBLock\fP \fBlock_\fP"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static \fBIDsGenerator\fP * \fBinstance_\fP =0"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "IDsGenerator::~IDsGenerator ()\fC [virtual]\fP"

.SS "IDsGenerator::IDsGenerator ()\fC [private]\fP"

.PP
References exchange_id_cursor_, and expander_id_cursor_\&.
.PP
Referenced by getInstance()\&.
.SS "virtual IDsGenerator::~IDsGenerator ()\fC [virtual]\fP"

.SS "IDsGenerator::IDsGenerator ()\fC [private]\fP"

.SH "Member Function Documentation"
.PP 
.SS "unsigned long long int IDsGenerator::generateUniqueExchangeID ()"

.PP
References Lock::acquire(), exchange_id_cursor_, lock_, and Lock::release()\&.
.PP
Referenced by claims::logical_operator::LogicalCrossJoin::GenerateChildPhysicalQueryPlan(), claims::logical_operator::LogicalScan::GetOptimalPhysicalPlan(), claims::logical_operator::LogicalFilter::GetOptimalPhysicalPlan(), claims::logical_operator::LogicalQueryPlanRoot::GetOptimalPhysicalPlan(), claims::logical_operator::LogicalQueryPlanRoot::GetPhysicalPlan(), claims::logical_operator::LogicalEqualJoin::GetPhysicalPlan(), claims::logical_operator::LogicalSort::GetPhysicalPlan(), and claims::logical_operator::LogicalAggregation::GetPhysicalPlan()\&.
.SS "unsigned long long int IDsGenerator::generateUniqueExchangeID ()"

.SS "\fBIDsGenerator\fP * IDsGenerator::getInstance ()\fC [static]\fP"

.PP
References IDsGenerator(), and instance_\&.
.PP
Referenced by claims::logical_operator::LogicalCrossJoin::GenerateChildPhysicalQueryPlan(), claims::logical_operator::LogicalScan::GetOptimalPhysicalPlan(), claims::logical_operator::LogicalFilter::GetOptimalPhysicalPlan(), claims::logical_operator::LogicalQueryPlanRoot::GetOptimalPhysicalPlan(), claims::logical_operator::LogicalQueryPlanRoot::GetPhysicalPlan(), claims::logical_operator::LogicalEqualJoin::GetPhysicalPlan(), claims::logical_operator::LogicalSort::GetPhysicalPlan(), claims::logical_operator::LogicalAggregation::GetPhysicalPlan(), and ExpanderTracker::registerNewExpander()\&.
.SS "static \fBIDsGenerator\fP* IDsGenerator::getInstance ()\fC [static]\fP"

.SS "\fBExpanderID\fP IDsGenerator::getUniqueExpanderID ()"

.PP
References Lock::acquire(), expander_id_cursor_, lock_, and Lock::release()\&.
.PP
Referenced by ExpanderTracker::registerNewExpander()\&.
.SS "\fBExpanderID\fP IDsGenerator::getUniqueExpanderID ()"

.SH "Member Data Documentation"
.PP 
.SS "unsigned long long int IDsGenerator::exchange_id_cursor_\fC [private]\fP"

.PP
Referenced by generateUniqueExchangeID(), and IDsGenerator()\&.
.SS "\fBExpanderID\fP IDsGenerator::expander_id_cursor_\fC [private]\fP"

.PP
Referenced by getUniqueExpanderID(), and IDsGenerator()\&.
.SS "static \fBIDsGenerator\fP * IDsGenerator::instance_ =0\fC [static]\fP, \fC [private]\fP"

.PP
Referenced by getInstance()\&.
.SS "\fBLock\fP IDsGenerator::lock_\fC [private]\fP"

.PP
Referenced by generateUniqueExchangeID(), and getUniqueExpanderID()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Claims from the source code\&.
