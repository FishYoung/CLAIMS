.TH "ProjectionDescriptor" 3 "Thu Nov 12 2015" "Claims" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ProjectionDescriptor \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <table\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBProjectionDescriptor\fP ()"
.br
.ti -1c
.RI "\fBProjectionDescriptor\fP (\fBProjectionID\fP)"
.br
.ti -1c
.RI "\fBProjectionDescriptor\fP (const string &name)"
.br
.ti -1c
.RI "virtual \fB~ProjectionDescriptor\fP ()"
.br
.ti -1c
.RI "void \fBaddAttribute\fP (\fBAttribute\fP attr)"
.br
.ti -1c
.RI "bool \fBhasAttribute\fP (const \fBAttribute\fP &attr) const "
.br
.ti -1c
.RI "void \fBDefinePartitonier\fP (const unsigned &number_of_partitions, const \fBAttribute\fP &partition_key, \fBPartitionFunction\fP *partition_functin)"
.br
.ti -1c
.RI "\fBPartitioner\fP * \fBgetPartitioner\fP () const "
.br
.ti -1c
.RI "bool \fBisExist\fP (const string &name) const "
.br
.ti -1c
.RI "void \fBsetProjectionID\fP (const \fBProjectionID\fP &pid)"
.br
.ti -1c
.RI "map< string, set< string > > \fBgetFileLocations\fP () const "
.br
.ti -1c
.RI "\fBProjectionID\fP \fBgetProjectionID\fP () const "
.br
.ti -1c
.RI "bool \fBAllPartitionBound\fP () const "
.br
.ti -1c
.RI "std::vector< \fBAttribute\fP > \fBgetAttributeList\fP () const "
.br
.ti -1c
.RI "\fBSchema\fP * \fBgetSchema\fP () const "
.br
.ti -1c
.RI "int \fBgetAttributeIndex\fP (const \fBAttribute\fP &att) const "
.br
.ti -1c
.RI "int long \fBgetNumberOfTuplesOnPartition\fP (const unsigned partition_off) const "
.br
.ti -1c
.RI "unsigned int \fBgetProjectionCost\fP () const "
.br
.RI "\fIMethod description: \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "template<class Archive > void \fBserialize\fP (Archive &ar, const unsigned int version)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBProjectionID\fP \fBprojection_id_\fP"
.br
.ti -1c
.RI "vector< \fBColumn\fP > \fBcolumn_list_\fP"
.br
.ti -1c
.RI "\fBPartitioner\fP * \fBpartitioner\fP"
.br
.ti -1c
.RI "map< string, set< string > > \fBfileLocations\fP"
.br
.ti -1c
.RI "string \fBhdfsFilePath\fP"
.br
.ti -1c
.RI "map< string, string > \fBblkMemoryLocations\fP"
.br
.ti -1c
.RI "string \fBProjection_name_\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBTableDescriptor\fP"
.br
.ti -1c
.RI "class \fBboost::serialization::access\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBAttribute\fP describes a column in type, name, position in the table\&. A projection is a combination of columns that belong to a single table and will be horizontally partitioned among storage instances\&. \fBProjectionDescriptor\fP mainly contains two kinds of important information:
.PP
1)\&. how many attributes there are in a projection and what are they\&.
.PP
2)\&. how the projection is partitioned (e\&.g\&., hash partition, range partition)\&. How many storage instances are involved\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ProjectionDescriptor::ProjectionDescriptor ()\fC [inline]\fP"

.SS "ProjectionDescriptor::ProjectionDescriptor (\fBProjectionID\fPpid)\fC [explicit]\fP"

.SS "ProjectionDescriptor::ProjectionDescriptor (const string &name)\fC [explicit]\fP"

.SS "ProjectionDescriptor::~ProjectionDescriptor ()\fC [virtual]\fP"

.SH "Member Function Documentation"
.PP 
.SS "void ProjectionDescriptor::addAttribute (\fBAttribute\fPattr)"

.PP
References column_list_, and projection_id_\&.
.SS "bool ProjectionDescriptor::AllPartitionBound () const"

.PP
References Partitioner::allPartitionBound(), and partitioner\&.
.PP
Referenced by LogicalCSBIndexBuilding::GetPlanContext(), LogicalIndexScan::GetPlanContext(), and claims::logical_operator::LogicalScan::GetPlanContext()\&.
.SS "void ProjectionDescriptor::DefinePartitonier (const unsigned &number_of_partitions, const \fBAttribute\fP &partition_key, \fBPartitionFunction\fP *partition_functin)"

.PP
References partitioner, and projection_id_\&.
.SS "int ProjectionDescriptor::getAttributeIndex (const \fBAttribute\fP &att) const"

.PP
References getAttributeList()\&.
.PP
Referenced by HdfsLoader::HdfsLoader()\&.
.SS "std::vector< \fBAttribute\fP > ProjectionDescriptor::getAttributeList () const"

.PP
References column_list_\&.
.PP
Referenced by Analyzer::analyse_on_project(), getAttributeIndex(), LogicalCSBIndexBuilding::GetPlanContext(), LogicalIndexScan::GetPlanContext(), getSchema(), HdfsLoader::HdfsLoader(), and claims::logical_operator::LogicalScan::LogicalScan()\&.
.SS "map<string, set<string> > ProjectionDescriptor::getFileLocations () const\fC [inline]\fP"

.SS "long int ProjectionDescriptor::getNumberOfTuplesOnPartition (const unsignedpartition_off) const"

.PP
References Partitioner::getPartitionCardinality(), and partitioner\&.
.SS "\fBPartitioner\fP * ProjectionDescriptor::getPartitioner () const"

.PP
References partitioner\&.
.PP
Referenced by HdfsLoader::append(), BindingTest(), create_poc_data_four_partitions(), create_poc_data_one_partitions(), CreateProjection(), execting_test(), Catalog::getPartitionIDList(), LogicalIndexScan::GetPlanContext(), LogicalCSBIndexBuilding::GetPlanContext(), claims::logical_operator::LogicalScan::GetPlanContext(), HdfsLoader::HdfsLoader(), init_multi_node_tpc_h_envoriment_(), init_poc_environment(), init_single_node_tpc_h_envoriment_(), init_single_node_tpc_h_envoriment_ing(), init_single_node_tpc_h_envoriment_sort(), init_tt_environment(), HdfsLoader::load(), loadData(), startup_catalog(), startup_mulitple_node_environment_of_poc(), startup_multiple_node_environment(), startup_multiple_node_environment_of_stock(), startup_multiple_node_environment_of_tpch(), startup_single_node_environment_of_tpch(), startup_single_node_one_partition_environment_of_tpch(), statistic_manager_test(), test_CSBIndexBuilding(), test_index_scan_iterator(), test_logical_csb_index_building(), and variable_schema_test()\&.
.SS "unsigned int ProjectionDescriptor::getProjectionCost () const"

.PP
Method description: 
.PP
\fBReturns:\fP
.RS 4
: the sum of all attribute's length in projection, as this projection's cost 
.RE
.PP

.PP
References column_list_\&.
.PP
Referenced by claims::logical_operator::LogicalScan::GetPlanContext()\&.
.SS "\fBProjectionID\fP ProjectionDescriptor::getProjectionID () const\fC [inline]\fP"

.PP
Referenced by bulk_test_logical_index_scan(), claims::logical_operator::LogicalScan::GetOptimalPhysicalPlan(), claims::logical_operator::LogicalScan::GetPhysicalPlan(), HdfsLoader::HdfsLoader(), LogicalCSBIndexBuilding::Print(), claims::logical_operator::LogicalScan::Print(), projection_scan(), test_CSBIndexBuilding(), test_index_filter_performance(), test_index_scan_iterator(), test_logical_csb_index_building(), test_logical_index_building(), test_logical_index_scan(), and variable_schema_test()\&.
.SS "\fBSchema\fP * ProjectionDescriptor::getSchema () const"
Only fixed schema is supported now\&. TODO: support other schema\&.
.PP
References getAttributeList()\&.
.PP
Referenced by HdfsLoader::HdfsLoader(), insert_into_hash_table_from_projection(), projection_scan(), and test_block_construct()\&.
.SS "bool ProjectionDescriptor::hasAttribute (const \fBAttribute\fP &attr) const"

.PP
References column_list_, and Attribute::index\&.
.PP
Referenced by Analyzer::analyse(), Analyzer::computeHistogram(), and claims::logical_operator::LogicalScan::GetPlanContext()\&.
.SS "bool ProjectionDescriptor::isExist (const string &name) const"

.PP
References column_list_\&.
.PP
Referenced by Catalog::getPartitionIDList()\&.
.SS "template<class Archive > void ProjectionDescriptor::serialize (Archive &ar, const unsigned intversion)\fC [inline]\fP, \fC [private]\fP"

.SS "void ProjectionDescriptor::setProjectionID (const \fBProjectionID\fP &pid)\fC [inline]\fP"

.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class boost::serialization::access\fC [friend]\fP"

.SS "friend class \fBTableDescriptor\fP\fC [friend]\fP"

.SH "Member Data Documentation"
.PP 
.SS "map<string, string> ProjectionDescriptor::blkMemoryLocations\fC [private]\fP"

.SS "vector<\fBColumn\fP> ProjectionDescriptor::column_list_\fC [private]\fP"

.PP
Referenced by addAttribute(), getAttributeList(), getProjectionCost(), hasAttribute(), and isExist()\&.
.SS "map<string, set<string> > ProjectionDescriptor::fileLocations\fC [private]\fP"

.SS "string ProjectionDescriptor::hdfsFilePath\fC [private]\fP"

.SS "\fBPartitioner\fP* ProjectionDescriptor::partitioner\fC [private]\fP"

.PP
Referenced by AllPartitionBound(), DefinePartitonier(), getNumberOfTuplesOnPartition(), and getPartitioner()\&.
.SS "\fBProjectionID\fP ProjectionDescriptor::projection_id_\fC [private]\fP"

.PP
Referenced by addAttribute(), and DefinePartitonier()\&.
.SS "string ProjectionDescriptor::Projection_name_\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Claims from the source code\&.
