.TH "ExpressionItem" 3 "Thu Nov 12 2015" "Claims" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ExpressionItem \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ExpressionItem\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBItemType\fP { \fBconst_type\fP, \fBvariable_type\fP, \fBoperator_type\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBprint\fP ()"
.br
.ti -1c
.RI "void \fBprint_value\fP ()"
.br
.ti -1c
.RI "\fBExpressionItem\fP ()"
.br
.ti -1c
.RI "virtual \fB~ExpressionItem\fP ()"
.br
.ti -1c
.RI "bool \fBsetValue\fP (void *, \fBdata_type\fP)"
.br
.ti -1c
.RI "bool \fBsetData\fP (\fBdata__\fP &)"
.br
.ti -1c
.RI "bool \fBsetData\fP (\fBdata__\fP &, \fBdata_type\fP)"
.br
.ti -1c
.RI "bool \fBsetIntValue\fP (const char *)"
.br
.ti -1c
.RI "bool \fBsetIntValue\fP (int)"
.br
.ti -1c
.RI "bool \fBsetFloatValue\fP (const char *)"
.br
.ti -1c
.RI "bool \fBsetFloatValue\fP (float &)"
.br
.ti -1c
.RI "bool \fBsetDoubleValue\fP (const char *)"
.br
.ti -1c
.RI "bool \fBsetDoubleValue\fP (double &)"
.br
.ti -1c
.RI "bool \fBsetULongValue\fP (const char *)"
.br
.ti -1c
.RI "bool \fBsetULongValue\fP (unsigned long)"
.br
.ti -1c
.RI "bool \fBsetStringValue\fP (std::string)"
.br
.ti -1c
.RI "bool \fBsetStringValue\fP (const char *str)"
.br
.ti -1c
.RI "bool \fBsetVariable\fP (const char *, const char *)"
.br
.ti -1c
.RI "bool \fBsetVariable\fP (const char *)"
.br
.ti -1c
.RI "bool \fBsetDecimalValue\fP (const char *)"
.br
.ti -1c
.RI "bool \fBsetOperator\fP (const char *)"
.br
.ti -1c
.RI "bool \fBsetDateValue\fP (const char *)"
.br
.ti -1c
.RI "bool \fBsetDatetimeValue\fP (const char *)"
.br
.ti -1c
.RI "bool \fBsetTimeValue\fP (const char *)"
.br
.ti -1c
.RI "bool \fBsetBooleanValue\fP (bool)"
.br
.ti -1c
.RI "bool \fBsetSmallIntValue\fP (short &)"
.br
.ti -1c
.RI "template<class Archive > void \fBserialize\fP (Archive &ar, const unsigned int version)"
.br
.ti -1c
.RI "std::string \fBgetOperatorName\fP () const "
.br
.ti -1c
.RI "bool \fBgetType\fP (const char *type_str)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "union {"
.br
.ti -1c
.RI "   \fBvariable\fP \fBvar\fP"
.br
.ti -1c
.RI "   \fBdata__\fP \fBdata\fP"
.br
.ti -1c
.RI "   \fBexpress_operator\fP \fBop\fP"
.br
.ti -1c
.RI "} \fBcontent\fP"
.br
.ti -1c
.RI "\fBItemType\fP \fBtype\fP"
.br
.ti -1c
.RI "date \fB_date\fP"
.br
.ti -1c
.RI "time_duration \fB_time\fP"
.br
.ti -1c
.RI "ptime \fB_datetime\fP"
.br
.ti -1c
.RI "\fBNValue\fP \fB_decimal\fP"
.br
.ti -1c
.RI "std::string \fB_string\fP"
.br
.ti -1c
.RI "std::string \fBitem_name\fP"
.br
.ti -1c
.RI "\fBdata_type\fP \fBreturn_type\fP"
.br
.ti -1c
.RI "unsigned \fBsize\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "std::string \fBgetItemTypeName\fP () const "
.br
.ti -1c
.RI "std::string \fBdata_value_to_string\fP () const "
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBboost::serialization::access\fP"
.br
.in -1c
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBExpressionItem::ItemType\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIconst_type \fP\fP
.TP
\fB\fIvariable_type \fP\fP
.TP
\fB\fIoperator_type \fP\fP
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ExpressionItem::ExpressionItem ()"

.SS "ExpressionItem::~ExpressionItem ()\fC [virtual]\fP"

.SH "Member Function Documentation"
.PP 
.SS "std::string ExpressionItem::data_value_to_string () const\fC [inline]\fP, \fC [private]\fP"

.PP
References t_boolean, t_date, t_datetime, t_decimal, t_double, t_float, t_int, t_smallInt, t_string, and t_u_long\&.
.SS "std::string ExpressionItem::getItemTypeName () const\fC [inline]\fP, \fC [private]\fP"

.SS "std::string ExpressionItem::getOperatorName () const\fC [inline]\fP"

.PP
References op_add, op_and, op_case, op_case_else, op_case_then, op_case_when, op_cast, op_cast_int, op_com_EQ, op_com_G, op_com_GEQ, op_com_L, op_com_LEQ, op_com_NEQ, op_mins, op_multiple, op_not, op_or, op_substring, op_trim, and op_upper\&.
.SS "bool ExpressionItem::getType (const char *type_str)\fC [inline]\fP"

.PP
References t_int, and t_string\&.
.PP
Referenced by cast()\&.
.SS "void ExpressionItem::print ()\fC [inline]\fP"

.PP
References getReturnTypeName()\&.
.SS "void ExpressionItem::print_value ()\fC [inline]\fP"

.SS "template<class Archive > void ExpressionItem::serialize (Archive &ar, const unsigned intversion)\fC [inline]\fP"

.SS "bool ExpressionItem::setBooleanValue (boolvalue)"

.PP
References const_type, content, return_type, t_boolean, and type\&.
.PP
Referenced by setValue()\&.
.SS "bool ExpressionItem::setData (\fBdata__\fP &data)"

.PP
References const_type, content, data, and type\&.
.SS "bool ExpressionItem::setData (\fBdata__\fP &data, \fBdata_type\fPrt)"

.PP
References const_type, content, data, return_type, and type\&.
.SS "bool ExpressionItem::setDatetimeValue (const char *datetime_str)"

.PP
References _datetime, const_type, item_name, return_type, t_datetime, and type\&.
.PP
Referenced by setValue()\&.
.SS "bool ExpressionItem::setDateValue (const char *date_str)"

.PP
References _date, const_type, item_name, return_type, t_date, and type\&.
.PP
Referenced by setValue()\&.
.SS "bool ExpressionItem::setDecimalValue (const char *decimal_str)"

.PP
References _decimal, const_type, item_name, return_type, t_decimal, and type\&.
.PP
Referenced by setValue(), test_add(), and test_multiple()\&.
.SS "bool ExpressionItem::setDoubleValue (const char *double_str)"

.PP
References const_type, content, item_name, return_type, t_double, and type\&.
.PP
Referenced by setValue()\&.
.SS "bool ExpressionItem::setDoubleValue (double &double_)"

.PP
References const_type, content, return_type, t_double, and type\&.
.SS "bool ExpressionItem::setFloatValue (const char *float_str)"

.PP
References const_type, content, item_name, return_type, t_float, and type\&.
.PP
Referenced by setValue(), test_com_less(), and test_multiple_()\&.
.SS "bool ExpressionItem::setFloatValue (float &float_)"

.PP
References const_type, content, return_type, t_float, and type\&.
.SS "bool ExpressionItem::setIntValue (const char *int_str)"

.PP
References const_type, content, item_name, return_type, t_int, and type\&.
.PP
Referenced by query_select_aggregation(), query_select_aggregation_ing(), query_select_fzh(), query_select_sort(), setValue(), test_add(), test_add_(), test_case_exp(), test_cast(), test_com_less(), test_multiple(), test_multiple_(), test_substring(), and test_trim()\&.
.SS "bool ExpressionItem::setIntValue (intvalue)"

.PP
References const_type, content, return_type, t_int, and type\&.
.SS "bool ExpressionItem::setOperator (const char *op_str)"

.PP
References content, item_name, op_add, op_and, op_case, op_case_else, op_case_then, op_case_when, op_cast, op_com_EQ, op_com_G, op_com_GEQ, op_com_L, op_com_LEQ, op_com_NEQ, op_mins, op_multiple, op_not, op_or, op_substring, op_trim, op_upper, operator_type, and type\&.
.PP
Referenced by query_select_aggregation(), query_select_aggregation_ing(), query_select_fzh(), query_select_sort(), test_add(), test_add_(), test_case_exp(), test_cast(), test_com_less(), test_multiple(), test_multiple_(), test_substring(), test_trim(), and test_upper()\&.
.SS "bool ExpressionItem::setSmallIntValue (short &sint_)"

.PP
References const_type, content, return_type, t_smallInt, and type\&.
.PP
Referenced by setValue()\&.
.SS "bool ExpressionItem::setStringValue (std::stringstr)"

.PP
References _string, const_type, return_type, t_string, and type\&.
.PP
Referenced by setValue(), test_case_exp(), test_cast(), test_substring(), test_trim(), and test_upper()\&.
.SS "bool ExpressionItem::setStringValue (const char *str)"

.PP
References _string, const_type, return_type, t_string, and type\&.
.SS "bool ExpressionItem::setTimeValue (const char *time_str)"

.PP
References _time, const_type, item_name, return_type, t_time, and type\&.
.PP
Referenced by setValue()\&.
.SS "bool ExpressionItem::setULongValue (const char *u_long_str)"

.PP
References const_type, content, item_name, return_type, t_u_long, and type\&.
.PP
Referenced by setValue()\&.
.SS "bool ExpressionItem::setULongValue (unsigned longu_long)"

.PP
References const_type, content, return_type, t_u_long, and type\&.
.SS "bool ExpressionItem::setValue (void *value_str, \fBdata_type\fPtype)"

.PP
References setBooleanValue(), setDatetimeValue(), setDateValue(), setDecimalValue(), setDoubleValue(), setFloatValue(), setIntValue(), setSmallIntValue(), setStringValue(), setTimeValue(), setULongValue(), t_boolean, t_date, t_datetime, t_decimal, t_double, t_float, t_int, t_smallInt, t_string, t_time, and t_u_long\&.
.SS "bool ExpressionItem::setVariable (const char *table, const char *column)"

.PP
References content, item_name, type, and variable_type\&.
.PP
Referenced by query_select_aggregation(), query_select_aggregation_ing(), query_select_fzh(), query_select_sort(), and query_select_sort_string()\&.
.SS "bool ExpressionItem::setVariable (const char *table_column)"

.PP
References content, item_name, type, and variable_type\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class boost::serialization::access\fC [friend]\fP"

.SH "Member Data Documentation"
.PP 
.SS "date ExpressionItem::_date"

.PP
Referenced by setDateValue()\&.
.SS "ptime ExpressionItem::_datetime"

.PP
Referenced by setDatetimeValue()\&.
.SS "\fBNValue\fP ExpressionItem::_decimal"

.PP
Referenced by add_in_same_type(), compare_equal_in_same_type(), compare_great_equal_in_same_type(), compare_great_in_same_type(), compare_less_equal_in_same_type(), compare_less_in_same_type(), compare_not_equal_in_same_type(), get_boolean_expr(), int_to_decimal(), mins_in_same_type(), muls_in_same_type(), setDecimalValue(), test_add(), and test_multiple()\&.
.SS "std::string ExpressionItem::_string"

.PP
Referenced by setStringValue(), string_to_int(), substring(), test_case_exp(), test_substring(), test_trim(), test_upper(), trim(), and upper()\&.
.SS "time_duration ExpressionItem::_time"

.PP
Referenced by setTimeValue()\&.
.SS "union { \&.\&.\&. }  ExpressionItem::content"

.PP
Referenced by add_in_same_type(), andop(), compare_equal_in_same_type(), compare_great_equal_in_same_type(), compare_great_in_same_type(), compare_less_equal_in_same_type(), compare_less_in_same_type(), compare_not_equal_in_same_type(), ExpressionCalculator::compute(), ExpressionCalculator::computes(), do_case(), get_boolean_expr(), int_to_decimal(), int_to_double(), int_to_float(), int_to_ulong(), mins_in_same_type(), muls_in_same_type(), notop(), orop(), setBooleanValue(), setData(), setDoubleValue(), setFloatValue(), setIntValue(), setOperator(), setSmallIntValue(), setULongValue(), setVariable(), string_to_int(), substring(), test_add_(), test_cast(), test_com_less(), test_multiple_(), and trim()\&.
.SS "\fBdata__\fP ExpressionItem::data"

.PP
Referenced by add_in_same_type(), andop(), compare_equal_in_same_type(), compare_great_equal_in_same_type(), compare_great_in_same_type(), compare_less_equal_in_same_type(), compare_less_in_same_type(), compare_not_equal_in_same_type(), do_case(), get_boolean_expr(), int_to_decimal(), int_to_double(), int_to_float(), int_to_ulong(), mins_in_same_type(), muls_in_same_type(), notop(), orop(), setData(), string_to_int(), substring(), test_add_(), test_cast(), test_com_less(), test_multiple_(), and trim()\&.
.SS "std::string ExpressionItem::item_name"

.PP
Referenced by setDatetimeValue(), setDateValue(), setDecimalValue(), setDoubleValue(), setFloatValue(), setIntValue(), setOperator(), setTimeValue(), setULongValue(), and setVariable()\&.
.SS "\fBexpress_operator\fP ExpressionItem::op"

.PP
Referenced by ExpressionCalculator::compute(), and ExpressionCalculator::computes()\&.
.SS "\fBdata_type\fP ExpressionItem::return_type"

.PP
Referenced by add(), add_in_same_type(), adds(), andop(), cast(), compare_equal_in_same_type(), compare_great_equal_in_same_type(), compare_great_in_same_type(), compare_less_equal_in_same_type(), compare_less_in_same_type(), compare_not_equal_in_same_type(), do_case(), get_boolean_expr(), get_compare_return_type(), int_to_decimal(), int_to_double(), int_to_float(), int_to_int(), int_to_ulong(), mins(), mins_in_same_type(), minss(), mul(), muls(), muls_in_same_type(), notop(), orop(), setBooleanValue(), setData(), setDatetimeValue(), setDateValue(), setDecimalValue(), setDoubleValue(), setFloatValue(), setIntValue(), setSmallIntValue(), setStringValue(), setTimeValue(), setULongValue(), string_to_int(), substring(), test_add(), test_add_(), test_case_exp(), test_cast(), test_com_less(), test_multiple(), test_multiple_(), test_substring(), test_trim(), test_upper(), trim(), and upper()\&.
.SS "unsigned ExpressionItem::size"

.SS "\fBItemType\fP ExpressionItem::type"

.PP
Referenced by andop(), compare_equal(), compare_great(), compare_great_equal(), compare_less(), compare_less_equal(), compare_not_equal(), ExpressionCalculator::compute(), ExpressionCalculator::computes(), do_case(), get_boolean_expr(), get_compare_return_type(), notop(), orop(), setBooleanValue(), setData(), setDatetimeValue(), setDateValue(), setDecimalValue(), setDoubleValue(), setFloatValue(), setIntValue(), setOperator(), setSmallIntValue(), setStringValue(), setTimeValue(), setULongValue(), setVariable(), substring(), trim(), and upper()\&.
.SS "\fBvariable\fP ExpressionItem::var"


.SH "Author"
.PP 
Generated automatically by Doxygen for Claims from the source code\&.
