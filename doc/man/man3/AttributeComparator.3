.TH "AttributeComparator" 3 "Thu Nov 12 2015" "Claims" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AttributeComparator \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <AttributeComparator\&.h>\fP
.PP
Inherits \fBComparator\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBAttributeComparator\fP (\fBcolumn_type\fP x, \fBcolumn_type\fP y, \fBComparator::comparison\fP c, unsigned \fBindex\fP, void *value)"
.br
.ti -1c
.RI "\fBAttributeComparator\fP (\fBcolumn_type\fP x, \fBComparator::comparison\fP c, unsigned \fBindex\fP, void *value)"
.br
.ti -1c
.RI "\fBAttributeComparator\fP (const \fBAttributeComparator\fP &c_a)"
.br
.ti -1c
.RI "\fBAttributeComparator\fP ()"
.br
.ti -1c
.RI "\fB~AttributeComparator\fP ()"
.br
.ti -1c
.RI "bool \fBfilter\fP (void *x) const \fB__attribute__\fP((always_inline))"
.br
.ti -1c
.RI "unsigned \fBget_index\fP () const "
.br
.ti -1c
.RI "void * \fBget_value\fP () const "
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "void * \fBvalue_\fP"
.br
.ti -1c
.RI "unsigned \fBindex\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "template<class Archive > void \fBserialize\fP (Archive &ar, const unsigned int version)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "std::vector< char > \fBvaluebytes\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBFilterIterator\fP"
.br
.ti -1c
.RI "class \fBboost::serialization::access\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Constructor & Destructor Documentation"
.PP 
.SS "AttributeComparator::AttributeComparator (\fBcolumn_type\fPx, \fBcolumn_type\fPy, \fBComparator::comparison\fPc, unsignedindex, void *value)"

.PP
References Operate::assignment(), cacheline_size, Comparator::compare, column_type::get_length(), column_type::operate, and value_\&.
.SS "AttributeComparator::AttributeComparator (\fBcolumn_type\fPx, \fBComparator::comparison\fPc, unsignedindex, void *value)"

.PP
References Operate::assignment(), cacheline_size, Comparator::compare, column_type::get_length(), column_type::operate, and value_\&.
.SS "AttributeComparator::AttributeComparator (const \fBAttributeComparator\fP &c_a)"

.PP
References Operate::assignment(), cacheline_size, Comparator::compare, column_type::get_length(), index, column_type::operate, Comparator::pair, Comparator::Pair::second, and value_\&.
.SS "AttributeComparator::AttributeComparator ()\fC [inline]\fP"

.SS "AttributeComparator::~AttributeComparator ()"

.PP
References value_\&.
.SH "Member Function Documentation"
.PP 
.SS "bool AttributeComparator::filter (void *x) const\fC [inline]\fP"

.PP
References Comparator::compare, and value_\&.
.PP
Referenced by filter_test()\&.
.SS "unsigned AttributeComparator::get_index () const\fC [inline]\fP"

.PP
References index\&.
.SS "void* AttributeComparator::get_value () const\fC [inline]\fP"

.PP
References value_\&.
.SS "template<class Archive > void AttributeComparator::serialize (Archive &ar, const unsigned intversion)\fC [inline]\fP, \fC [private]\fP"

.PP
References cacheline_size, Comparator::compare, column_type::get_length(), index, Comparator::pair, Comparator::Pair::second, value_, and valuebytes\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class boost::serialization::access\fC [friend]\fP"

.SS "friend class FilterIterator\fC [friend]\fP"

.SH "Member Data Documentation"
.PP 
.SS "unsigned AttributeComparator::index\fC [protected]\fP"

.PP
Referenced by AttributeComparator(), get_index(), and serialize()\&.
.SS "void* AttributeComparator::value_\fC [protected]\fP"

.PP
Referenced by AttributeComparator(), filter(), get_value(), serialize(), and ~AttributeComparator()\&.
.SS "std::vector<char> AttributeComparator::valuebytes\fC [private]\fP"
a kind of ugly here\&. Because of the length of the value is unknown, we first store the value into the vector and then serialize the vector\&. TODO: 
.PP
Referenced by serialize()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Claims from the source code\&.
