.TH "Environment" 3 "Thu Nov 12 2015" "Claims" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Environment \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Environment\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~Environment\fP ()"
.br
.ti -1c
.RI "std::string \fBgetIp\fP ()"
.br
.ti -1c
.RI "unsigned \fBgetPort\fP ()"
.br
.ti -1c
.RI "\fBAdaptiveEndPoint\fP * \fBgetEndPoint\fP ()"
.br
.ti -1c
.RI "\fBExchangeTracker\fP * \fBgetExchangeTracker\fP ()"
.br
.ti -1c
.RI "\fBResourceManagerMaster\fP * \fBgetResourceManagerMaster\fP ()"
.br
.ti -1c
.RI "\fBInstanceResourceManager\fP * \fBgetResourceManagerSlave\fP ()"
.br
.ti -1c
.RI "\fBNodeID\fP \fBgetNodeID\fP () const "
.br
.ti -1c
.RI "\fBCatalog\fP * \fBgetCatalog\fP () const "
.br
.ti -1c
.RI "\fBThreadPool\fP * \fBgetThreadPool\fP () const "
.br
.ti -1c
.RI "\fBIteratorExecutorSlave\fP * \fBgetIteratorExecutorSlave\fP () const "
.br
.ti -1c
.RI "\fBEnvironment\fP (bool ismaster=false)"
.br
.ti -1c
.RI "virtual \fB~Environment\fP ()"
.br
.ti -1c
.RI "std::string \fBgetIp\fP ()"
.br
.ti -1c
.RI "unsigned \fBgetPort\fP ()"
.br
.ti -1c
.RI "\fBAdaptiveEndPoint\fP * \fBgetEndPoint\fP ()"
.br
.ti -1c
.RI "\fBExchangeTracker\fP * \fBgetExchangeTracker\fP ()"
.br
.ti -1c
.RI "\fBResourceManagerMaster\fP * \fBgetResourceManagerMaster\fP ()"
.br
.ti -1c
.RI "\fBInstanceResourceManager\fP * \fBgetResourceManagerSlave\fP ()"
.br
.ti -1c
.RI "\fBNodeID\fP \fBgetNodeID\fP () const "
.br
.ti -1c
.RI "\fBCatalog\fP * \fBgetCatalog\fP () const "
.br
.ti -1c
.RI "\fBThreadPool\fP * \fBgetThreadPool\fP () const "
.br
.ti -1c
.RI "\fBIteratorExecutorSlave\fP * \fBgetIteratorExecutorSlave\fP () const "
.br
.ti -1c
.RI "\fBEnvironment\fP (bool ismaster=false)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBEnvironment\fP * \fBgetInstance\fP (bool ismaster=0)"
.br
.ti -1c
.RI "static \fBEnvironment\fP * \fBgetInstance\fP (bool ismaster=0)"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBreadConfigFile\fP ()"
.br
.ti -1c
.RI "void \fBinitializeEndPoint\fP ()"
.br
.ti -1c
.RI "void \fBinitializeCoordinator\fP ()"
.br
.ti -1c
.RI "void \fBinitializeStorage\fP ()"
.br
.ti -1c
.RI "void \fBinitializeResourceManager\fP ()"
.br
.ti -1c
.RI "void \fBinitializeBufferManager\fP ()"
.br
.ti -1c
.RI "void \fBinitializeIndexManager\fP ()"
.br
.ti -1c
.RI "void \fBinitializeClientListener\fP ()"
.br
.ti -1c
.RI "void \fBinitializeExpressionSystem\fP ()"
.br
.ti -1c
.RI "void \fBdestoryClientListener\fP ()"
.br
.ti -1c
.RI "bool \fBinitializeThreadPool\fP ()"
.br
.ti -1c
.RI "void \fBreadConfigFile\fP ()"
.br
.ti -1c
.RI "void \fBinitializeEndPoint\fP ()"
.br
.ti -1c
.RI "void \fBinitializeCoordinator\fP ()"
.br
.ti -1c
.RI "void \fBinitializeStorage\fP ()"
.br
.ti -1c
.RI "void \fBinitializeResourceManager\fP ()"
.br
.ti -1c
.RI "void \fBinitializeBufferManager\fP ()"
.br
.ti -1c
.RI "void \fBinitializeIndexManager\fP ()"
.br
.ti -1c
.RI "void \fBinitializeClientListener\fP ()"
.br
.ti -1c
.RI "void \fBinitializeExpressionSystem\fP ()"
.br
.ti -1c
.RI "void \fBdestoryClientListener\fP ()"
.br
.ti -1c
.RI "bool \fBinitializeThreadPool\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBPortManager\fP * \fBportManager\fP"
.br
.ti -1c
.RI "\fBAdaptiveEndPoint\fP * \fBendpoint\fP"
.br
.ti -1c
.RI "\fBCoordinator\fP * \fBcoordinator\fP"
.br
.ti -1c
.RI "std::string \fBip\fP"
.br
.ti -1c
.RI "unsigned \fBport\fP"
.br
.ti -1c
.RI "\fBIteratorExecutorSlave\fP * \fBiteratorExecutorSlave\fP"
.br
.ti -1c
.RI "\fBIteratorExecutorMaster\fP * \fBiteratorExecutorMaster\fP"
.br
.ti -1c
.RI "\fBExchangeTracker\fP * \fBexchangeTracker\fP"
.br
.ti -1c
.RI "\fBLogging\fP * \fBlogging_\fP"
.br
.ti -1c
.RI "bool \fBismaster_\fP"
.br
.ti -1c
.RI "\fBResourceManagerMaster\fP * \fBresourceManagerMaster_\fP"
.br
.ti -1c
.RI "\fBInstanceResourceManager\fP * \fBresourceManagerSlave_\fP"
.br
.ti -1c
.RI "\fBCatalog\fP * \fBcatalog_\fP"
.br
.ti -1c
.RI "\fBNodeID\fP \fBnodeid\fP"
.br
.ti -1c
.RI "\fBBlockManagerMaster\fP * \fBblockManagerMaster_\fP"
.br
.ti -1c
.RI "\fBBlockManager\fP * \fBblockManager_\fP"
.br
.ti -1c
.RI "\fBBufferManager\fP * \fBbufferManager_\fP"
.br
.ti -1c
.RI "\fBIndexManager\fP * \fBindexManager_\fP"
.br
.ti -1c
.RI "\fBExpanderTracker\fP * \fBexpander_tracker_\fP"
.br
.ti -1c
.RI "\fBClientListener\fP * \fBlistener_\fP"
.br
.ti -1c
.RI "\fBThreadPool\fP * \fBthread_pool_\fP"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static \fBEnvironment\fP * \fB_instance\fP = 0"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Environment::~Environment ()\fC [virtual]\fP"

.PP
References _instance, blockManager_, blockManagerMaster_, bufferManager_, catalog_, coordinator, destoryClientListener(), endpoint, exchangeTracker, expander_tracker_, ismaster_, iteratorExecutorMaster, iteratorExecutorSlave, logging_, portManager, resourceManagerMaster_, and resourceManagerSlave_\&.
.PP
Referenced by in_segment_scalability_test_on_poc(), in_segment_scalability_test_on_tpch(), issue27_multi_node(), issue27_single_node(), issue27_sort_single_node(), issue27ing_single_node(), main(), scalability_test(), tcp_h_test_multi_nodes(), tcp_h_test_single_node(), DMLTestPOC1Partition::TearDownTestCase(), test_index_manager(), and test_load()\&.
.SS "Environment::Environment (boolismaster = \fCfalse\fP)"
TODO: DO something in \fBAdaptiveEndPoint\fP such that the construction function does not return until the connection is completed\&. If so, the following sleep() dose not needed\&.
.PP
This is done in Aug\&.18 by Li :)
.PP
References _instance, catalog_, Logging::elog(), exchangeTracker, expander_tracker_, g_thread_pool_used, PortManager::getInstance(), Config::getInstance(), CodeGenerator::getInstance(), Catalog::getInstance(), ExpanderTracker::getInstance(), initializeBufferManager(), initializeClientListener(), initializeCoordinator(), initializeEndPoint(), initializeExpressionSystem(), initializeResourceManager(), initializeStorage(), initializeThreadPool(), iteratorExecutorMaster, iteratorExecutorSlave, Logging::log(), logging_, portManager, readConfigFile(), and Catalog::restoreCatalog()\&.
.PP
Referenced by getInstance()\&.
.SS "virtual Environment::~Environment ()\fC [virtual]\fP"

.SS "Environment::Environment (boolismaster = \fCfalse\fP)"

.SH "Member Function Documentation"
.PP 
.SS "void Environment::destoryClientListener ()\fC [private]\fP"

.PP
References listener_, and ClientListener::shutdown()\&.
.PP
Referenced by ~Environment()\&.
.SS "void Environment::destoryClientListener ()\fC [private]\fP"

.SS "\fBCatalog\fP * Environment::getCatalog () const"

.PP
References catalog_\&.
.PP
Referenced by add_all_table_column(), add_table_column(), BindingTest(), create_poc_data_four_partitions(), create_poc_data_one_partitions(), CreateTable(), claims::stmt_handler::CreateTableExec::CreateTableExec(), execting_test(), claims::stmt_handler::LoadExec::Execute(), claims::stmt_handler::InsertExec::Execute(), claims::stmt_handler::CreateTableExec::Execute(), execute_sql_test(), ExecuteLogicalQueryPlan(), get_aggregation_args(), AstSelectStmt::GetLogicalPlanOfProject(), init_multi_node_tpc_h_envoriment_(), init_poc_environment(), init_single_node_tpc_h_envoriment_(), init_single_node_tpc_h_envoriment_ing(), init_single_node_tpc_h_envoriment_sort(), init_tt_environment(), insert_into_hash_table_from_projection(), InsertData(), claims::stmt_handler::InsertExec::InsertExec(), lineitem_scan_aggregation(), lineitem_scan_filter(), lineitem_scan_self_join(), load_tpc_h_4_partition(), loadData(), claims::stmt_handler::LoadExec::LoadExec(), oncondition_check(), orderby_analysis(), projection_scan(), query_1(), query_2(), query_3(), query_select_aggregation(), query_select_aggregation_ing(), query_select_fzh(), query_select_sort(), query_select_sort_string(), sb_scan_aggregation(), sb_scan_filter(), sb_scan_self_join(), selectlist_expr_analysis(), AstTable::SemanticAnalisys(), startup_catalog(), startup_mulitple_node_environment_of_poc(), startup_multiple_node_environment(), startup_multiple_node_environment_of_stock(), startup_multiple_node_environment_of_tpch(), startup_single_node_environment_of_tpch(), startup_single_node_one_partition_environment_of_tpch(), statistic_manager_test(), table_has_column(), test_block_construct(), test_CSBIndexBuilding(), test_index_scan_iterator(), test_logical_csb_index_building(), testServerClient(), variable_schema_test(), and wherecondition_check()\&.
.SS "\fBCatalog\fP* Environment::getCatalog () const"

.SS "\fBAdaptiveEndPoint\fP * Environment::getEndPoint ()"

.PP
References endpoint\&.
.PP
Referenced by ExchangeTracker::ExchangeTracker(), IteratorExecutorMaster::IteratorExecutorMaster(), IteratorExecutorSlave::IteratorExecutorSlave(), and ResourceManagerMaster::ResourceManagerMaster()\&.
.SS "\fBAdaptiveEndPoint\fP* Environment::getEndPoint ()"

.SS "\fBExchangeTracker\fP * Environment::getExchangeTracker ()"

.PP
References exchangeTracker\&.
.PP
Referenced by claims::physical_operator::ExchangeMerger::Close(), claims::physical_operator::ExchangeSender::ConnectToUpper(), claims::physical_operator::ExchangeMerger::IsOtherMergersRegistered(), and claims::physical_operator::ExchangeMerger::RegisterExchange()\&.
.SS "\fBExchangeTracker\fP* Environment::getExchangeTracker ()"

.SS "\fBEnvironment\fP * Environment::getInstance (boolismaster = \fC0\fP)\fC [static]\fP"

.PP
References _instance, and Environment()\&.
.PP
Referenced by add_all_table_column(), add_table_column(), ExchangeTracker::ExchangeTrackerActor::AskForConnectionInfo(), ProjectionBinding::BindingEntireProjection(), BindingTest(), BlockManager::BlockManager(), BlockManagerMaster::BlockManagerMaster(), claims::physical_operator::ExchangeMerger::Close(), claims::physical_operator::ExchangeSender::ConnectToUpper(), create_load_test(), create_poc_data_four_partitions(), create_poc_data_one_partitions(), CreateTable(), claims::stmt_handler::CreateTableExec::CreateTableExec(), claims::physical_operator::ExchangeSenderMaterialized::CreateWorkerThread(), claims::physical_operator::Expander::CreateWorkingThread(), ExchangeTracker::ExchangeTracker(), execting_test(), claims::stmt_handler::LoadExec::Execute(), claims::stmt_handler::InsertExec::Execute(), claims::stmt_handler::CreateTableExec::Execute(), execute_sql_test(), IteratorExecutorMaster::ExecuteBlockStreamIteratorsOnSite(), ExecuteLogicalQueryPlan(), fromlist_analysis(), get_aggregation_args(), AstTable::GetLogicalPlan(), AstSelectStmt::GetLogicalPlanOfProject(), in_segment_scalability_test_on_poc(), in_segment_scalability_test_on_tpch(), init_multi_node_tpc_h_envoriment_(), init_poc_environment(), init_single_node_tpc_h_envoriment_(), init_single_node_tpc_h_envoriment_ing(), init_single_node_tpc_h_envoriment_sort(), init_tt_environment(), BlockManager::initialize(), insert_into_hash_table_from_projection(), InsertData(), claims::stmt_handler::InsertExec::InsertExec(), InstanceResourceManager::InstanceResourceManager(), claims::physical_operator::ExchangeMerger::IsOtherMergersRegistered(), issue27_multi_node(), issue27_single_node(), issue27_sort_single_node(), issue27ing_single_node(), IteratorExecutorMaster::IteratorExecutorMaster(), IteratorExecutorSlave::IteratorExecutorSlave(), lineitem_scan_aggregation(), lineitem_scan_filter(), lineitem_scan_self_join(), load_tpc_h_4_partition(), loadData(), claims::stmt_handler::LoadExec::LoadExec(), main(), main234234(), main_aaa(), oncondition_check(), claims::physical_operator::ResultCollector::Open(), orderby_analysis(), projection_scan(), query_1(), query_2(), query_3(), query_select_aggregation(), query_select_aggregation_ing(), query_select_fzh(), query_select_sort(), query_select_sort_string(), InstanceResourceManager::Register(), claims::physical_operator::ExchangeMerger::RegisterExchange(), ResourceManagerMaster::ResourceManagerMaster(), sb_scan_aggregation(), sb_scan_filter(), sb_scan_self_join(), scalability_test(), selectlist_expr_analysis(), AstTable::SemanticAnalisys(), BlockManagerMaster::SendBindingMessage(), BlockManagerMaster::SendUnbindingMessage(), DMLTestPOC1Partition::SetUpTestCase(), Coordinator::SetupTheTheron(), startup_catalog(), startup_mulitple_node_environment_of_poc(), startup_multiple_node_environment(), startup_multiple_node_environment_of_stock(), startup_multiple_node_environment_of_tpch(), startup_single_node_environment_of_poc(), startup_single_node_environment_of_tpch(), startup_single_node_one_partition_environment_of_tpch(), statistic_manager_test(), table_has_column(), tcp_h_test_multi_nodes(), tcp_h_test_single_node(), DMLTestPOC1Partition::TearDownTestCase(), test_block_construct(), test_CSBIndexBuilding(), test_expanderFramework_single_node(), test_index_manager(), test_index_scan_iterator(), test_load(), test_logical_csb_index_building(), test_multiple_expanderFramework_single_node(), testIteratorExecutor(), testServerClient(), ProjectionBinding::UnbindingEntireProjection(), variable_schema_test(), where_from2logicalplan(), and wherecondition_check()\&.
.SS "static \fBEnvironment\fP* Environment::getInstance (boolismaster = \fC0\fP)\fC [static]\fP"

.SS "std::string Environment::getIp ()"

.PP
References ip\&.
.PP
Referenced by InstanceResourceManager::Register(), and Coordinator::SetupTheTheron()\&.
.SS "std::string Environment::getIp ()"

.SS "\fBIteratorExecutorSlave\fP* Environment::getIteratorExecutorSlave () const"

.SS "\fBIteratorExecutorSlave\fP * Environment::getIteratorExecutorSlave () const"

.PP
References iteratorExecutorSlave\&.
.PP
Referenced by IteratorExecutorMaster::ExecuteBlockStreamIteratorsOnSite()\&.
.SS "\fBNodeID\fP Environment::getNodeID () const"

.PP
References nodeid\&.
.PP
Referenced by BlockManager::BlockManager(), ExchangeTracker::ExchangeTracker(), BlockManager::initialize(), and IteratorExecutorSlave::IteratorExecutorSlave()\&.
.SS "\fBNodeID\fP Environment::getNodeID () const"

.SS "unsigned Environment::getPort ()"

.SS "unsigned Environment::getPort ()"

.PP
References port\&.
.PP
Referenced by InstanceResourceManager::Register()\&.
.SS "\fBResourceManagerMaster\fP * Environment::getResourceManagerMaster ()"

.PP
References resourceManagerMaster_\&.
.PP
Referenced by ProjectionBinding::BindingEntireProjection(), BindingTest(), create_poc_data_four_partitions(), create_poc_data_one_partitions(), execting_test(), ExecuteLogicalQueryPlan(), init_multi_node_tpc_h_envoriment_(), init_poc_environment(), init_single_node_tpc_h_envoriment_(), init_single_node_tpc_h_envoriment_ing(), init_single_node_tpc_h_envoriment_sort(), init_tt_environment(), load_tpc_h_4_partition(), loadData(), startup_catalog(), startup_mulitple_node_environment_of_poc(), startup_multiple_node_environment(), startup_multiple_node_environment_of_stock(), startup_multiple_node_environment_of_tpch(), startup_single_node_environment_of_tpch(), startup_single_node_one_partition_environment_of_tpch(), statistic_manager_test(), test_CSBIndexBuilding(), test_index_scan_iterator(), test_logical_csb_index_building(), testServerClient(), ProjectionBinding::UnbindingEntireProjection(), and variable_schema_test()\&.
.SS "\fBResourceManagerMaster\fP* Environment::getResourceManagerMaster ()"

.SS "\fBInstanceResourceManager\fP* Environment::getResourceManagerSlave ()"

.SS "\fBInstanceResourceManager\fP * Environment::getResourceManagerSlave ()"

.PP
References resourceManagerSlave_\&.
.PP
Referenced by BlockManager::initialize()\&.
.SS "\fBThreadPool\fP* Environment::getThreadPool () const"

.SS "\fBThreadPool\fP * Environment::getThreadPool () const"

.PP
References thread_pool_\&.
.PP
Referenced by claims::physical_operator::ExchangeSenderMaterialized::CreateWorkerThread(), claims::physical_operator::Expander::CreateWorkingThread(), and claims::physical_operator::ResultCollector::Open()\&.
.SS "void Environment::initializeBufferManager ()\fC [private]\fP"

.PP
References bufferManager_, and BufferManager::getInstance()\&.
.PP
Referenced by Environment()\&.
.SS "void Environment::initializeBufferManager ()\fC [private]\fP"

.SS "void Environment::initializeClientListener ()\fC [private]\fP"

.PP
References Config::client_listener_port, ClientListener::configure(), and listener_\&.
.PP
Referenced by Environment()\&.
.SS "void Environment::initializeClientListener ()\fC [private]\fP"

.SS "void Environment::initializeCoordinator ()\fC [private]\fP"

.SS "void Environment::initializeCoordinator ()\fC [private]\fP"

.PP
References coordinator\&.
.PP
Referenced by Environment()\&.
.SS "void Environment::initializeEndPoint ()\fC [private]\fP"

.SS "void Environment::initializeEndPoint ()\fC [private]\fP"

.PP
References PortManager::applyPort(), Logging::elog(), endpoint, ip, Logging::log(), logging_, port, and portManager\&.
.PP
Referenced by Environment()\&.
.SS "void Environment::initializeExpressionSystem ()\fC [private]\fP"

.SS "void Environment::initializeExpressionSystem ()\fC [private]\fP"

.PP
References claims::common::InitAggAvgDivide(), initialize_arithmetic_type_promotion_matrix(), initialize_operator_function(), initialize_type_cast_functions(), claims::common::InitOperatorFunc(), claims::common::InitTypeCastFunc(), and claims::common::InitTypeConversionMatrix()\&.
.PP
Referenced by Environment()\&.
.SS "void Environment::initializeIndexManager ()\fC [private]\fP"

.PP
References IndexManager::getInstance(), and indexManager_\&.
.SS "void Environment::initializeIndexManager ()\fC [private]\fP"

.SS "void Environment::initializeResourceManager ()\fC [private]\fP"

.PP
References ismaster_, nodeid, InstanceResourceManager::Register(), resourceManagerMaster_, and resourceManagerSlave_\&.
.PP
Referenced by Environment()\&.
.SS "void Environment::initializeResourceManager ()\fC [private]\fP"

.SS "void Environment::initializeStorage ()\fC [private]\fP"

.SS "void Environment::initializeStorage ()\fC [private]\fP"

.PP
References blockManager_, blockManagerMaster_, BlockManagerMaster::getInstance(), BlockManager::getInstance(), BlockManagerMaster::initialize(), BlockManager::initialize(), and ismaster_\&.
.PP
Referenced by Environment()\&.
.SS "bool Environment::initializeThreadPool ()\fC [private]\fP"

.SS "bool Environment::initializeThreadPool ()\fC [private]\fP"

.PP
References thread_pool_, and ThreadPool::Thread_Pool_init()\&.
.PP
Referenced by Environment()\&.
.SS "void Environment::readConfigFile ()\fC [private]\fP"

.PP
References Config::config_file, and ip\&.
.PP
Referenced by Environment()\&.
.SS "void Environment::readConfigFile ()\fC [private]\fP"

.SH "Member Data Documentation"
.PP 
.SS "static \fBEnvironment\fP * Environment::_instance = 0\fC [static]\fP, \fC [private]\fP"

.PP
Referenced by Environment(), getInstance(), and ~Environment()\&.
.SS "\fBBlockManager\fP * Environment::blockManager_\fC [private]\fP"

.PP
Referenced by initializeStorage(), and ~Environment()\&.
.SS "\fBBlockManagerMaster\fP * Environment::blockManagerMaster_\fC [private]\fP"

.PP
Referenced by initializeStorage(), and ~Environment()\&.
.SS "\fBBufferManager\fP * Environment::bufferManager_\fC [private]\fP"

.PP
Referenced by initializeBufferManager(), and ~Environment()\&.
.SS "\fBCatalog\fP * Environment::catalog_\fC [private]\fP"

.PP
Referenced by Environment(), getCatalog(), and ~Environment()\&.
.SS "\fBCoordinator\fP * Environment::coordinator\fC [private]\fP"

.PP
Referenced by initializeCoordinator(), and ~Environment()\&.
.SS "\fBAdaptiveEndPoint\fP * Environment::endpoint\fC [private]\fP"

.PP
Referenced by getEndPoint(), initializeEndPoint(), and ~Environment()\&.
.SS "\fBExchangeTracker\fP * Environment::exchangeTracker\fC [private]\fP"

.PP
Referenced by Environment(), getExchangeTracker(), and ~Environment()\&.
.SS "\fBExpanderTracker\fP * Environment::expander_tracker_\fC [private]\fP"

.PP
Referenced by Environment(), and ~Environment()\&.
.SS "\fBIndexManager\fP * Environment::indexManager_\fC [private]\fP"

.PP
Referenced by initializeIndexManager()\&.
.SS "std::string Environment::ip\fC [private]\fP"

.PP
Referenced by getIp(), initializeEndPoint(), and readConfigFile()\&.
.SS "bool Environment::ismaster_\fC [private]\fP"

.PP
Referenced by initializeResourceManager(), initializeStorage(), and ~Environment()\&.
.SS "\fBIteratorExecutorMaster\fP * Environment::iteratorExecutorMaster\fC [private]\fP"

.PP
Referenced by Environment(), and ~Environment()\&.
.SS "\fBIteratorExecutorSlave\fP * Environment::iteratorExecutorSlave\fC [private]\fP"

.PP
Referenced by Environment(), getIteratorExecutorSlave(), and ~Environment()\&.
.SS "\fBClientListener\fP * Environment::listener_\fC [private]\fP"

.PP
Referenced by destoryClientListener(), and initializeClientListener()\&.
.SS "\fBLogging\fP * Environment::logging_\fC [private]\fP"

.PP
Referenced by Environment(), initializeEndPoint(), and ~Environment()\&.
.SS "\fBNodeID\fP Environment::nodeid\fC [private]\fP"

.PP
Referenced by getNodeID(), and initializeResourceManager()\&.
.SS "unsigned Environment::port\fC [private]\fP"

.PP
Referenced by getPort(), and initializeEndPoint()\&.
.SS "\fBPortManager\fP * Environment::portManager\fC [private]\fP"

.PP
Referenced by Environment(), initializeEndPoint(), and ~Environment()\&.
.SS "\fBResourceManagerMaster\fP * Environment::resourceManagerMaster_\fC [private]\fP"

.PP
Referenced by getResourceManagerMaster(), initializeResourceManager(), and ~Environment()\&.
.SS "\fBInstanceResourceManager\fP * Environment::resourceManagerSlave_\fC [private]\fP"

.PP
Referenced by getResourceManagerSlave(), initializeResourceManager(), and ~Environment()\&.
.SS "\fBThreadPool\fP * Environment::thread_pool_\fC [private]\fP"

.PP
Referenced by getThreadPool(), and initializeThreadPool()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Claims from the source code\&.
