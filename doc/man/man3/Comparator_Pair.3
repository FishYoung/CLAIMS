.TH "Comparator::Pair" 3 "Thu Nov 12 2015" "Claims" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Comparator::Pair \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Comparator\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPair\fP (\fBcolumn_type\fP \fBfirst\fP, \fBcolumn_type\fP \fBsecond\fP)"
.br
.ti -1c
.RI "\fBPair\fP ()"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const struct \fBComparator::Pair\fP &p) const "
.br
.ti -1c
.RI "bool \fBoperator<\fP (const struct \fBComparator::Pair\fP &p) const "
.br
.ti -1c
.RI "template<class Archive > void \fBserialize\fP (Archive &ar, const unsigned int version)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBcolumn_type\fP \fBfirst\fP"
.br
.ti -1c
.RI "\fBcolumn_type\fP \fBsecond\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBboost::serialization::access\fP"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Comparator::Pair::Pair (\fBcolumn_type\fPfirst, \fBcolumn_type\fPsecond)\fC [inline]\fP"

.SS "Comparator::Pair::Pair ()\fC [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "bool Comparator::Pair::operator< (const struct \fBComparator::Pair\fP &p) const\fC [inline]\fP"

.PP
References DATA_TYPE_NUMBER, first, second, and column_type::type\&.
.SS "bool Comparator::Pair::operator== (const struct \fBComparator::Pair\fP &p) const\fC [inline]\fP"

.PP
References first, and second\&.
.SS "template<class Archive > void Comparator::Pair::serialize (Archive &ar, const unsigned intversion)\fC [inline]\fP"

.PP
References first, and second\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class boost::serialization::access\fC [friend]\fP"

.SH "Member Data Documentation"
.PP 
.SS "\fBcolumn_type\fP Comparator::Pair::first"

.PP
Referenced by Comparator::iniatilize(), operator<(), operator==(), and serialize()\&.
.SS "\fBcolumn_type\fP Comparator::Pair::second"

.PP
Referenced by AttributeComparator::AttributeComparator(), Comparator::iniatilize(), operator<(), operator==(), serialize(), and AttributeComparator::serialize()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Claims from the source code\&.
