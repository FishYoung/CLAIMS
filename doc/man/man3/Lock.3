.TH "Lock" 3 "Thu Nov 12 2015" "Claims" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Lock \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <lock\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBLock\fP ()"
.br
.ti -1c
.RI "\fB~Lock\fP ()"
.br
.ti -1c
.RI "void \fBacquire\fP ()"
.br
.ti -1c
.RI "bool \fBtry_acquire\fP ()"
.br
.ti -1c
.RI "void \fBrelease\fP ()"
.br
.ti -1c
.RI "void \fBdestroy\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "pthread_mutex_t \fBm\fP"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Lock::Lock ()\fC [inline]\fP"

.PP
References m, and NULL\&.
.SS "Lock::~Lock ()\fC [inline]\fP"

.PP
References m\&.
.SH "Member Function Documentation"
.PP 
.SS "void Lock::acquire ()\fC [inline]\fP"

.PP
References m\&.
.PP
Referenced by Daemon::addExecutedResult(), claims::physical_operator::Expander::AddIntoCalledBackThreadList(), claims::physical_operator::Expander::AddIntoWorkingThreadList(), ExpanderTracker::addNewStageEndpoint(), Daemon::addRemoteCommand(), TableIDAllocator::allocate_unique_table_id(), MemoryChunkStore::applyChunk(), PortManager::applyPort(), BufferManager::applyStorageDedget(), bottomLayerCollecting::askForNextBlock(), DynamicBlockBuffer::atomicAppendNewBlock(), DynamicBlockBuffer::Iterator::atomicNextBlock(), bottomLayerCollecting::AtomicPopBlockStream(), IndexScanIterator::AtomicPopBlockStream(), claims::physical_operator::InOperator::AtomicPopFreeBlockStream(), claims::physical_operator::InOperator::AtomicPopFreeHtBlockStream(), claims::physical_operator::CombineTuple::AtomicPopRemainingBlock(), bottomLayerCollecting::atomicPopRemainingBlock(), claims::physical_operator::InOperator::AtomicPopRemainingBlock(), IndexScanIterator::atomicPopRemainingBlock(), bottomLayerCollecting::AtomicPushBlockStream(), IndexScanIterator::AtomicPushBlockStream(), claims::physical_operator::InOperator::AtomicPushFreeBlockStream(), claims::physical_operator::InOperator::AtomicPushFreeHtBlockStream(), claims::physical_operator::CombineTuple::AtomicPushRemainingBlock(), bottomLayerCollecting::atomicPushRemainingBlock(), claims::physical_operator::InOperator::AtomicPushRemainingBlock(), IndexScanIterator::atomicPushRemainingBlock(), BlockStreamBuffer::BlockStreamBuffer(), ExpanderTracker::callbackExpandedThread(), claims::physical_operator::Expander::ChildExhausted(), ChunkStorage::createChunkReaderIterator(), claims::physical_operator::Expander::CreateWorkingThread(), TableIDAllocator::decrease_table_id(), ExpanderTracker::deleteExpandedThreadStatus(), BlockStreamBuffer::Empty(), claims::physical_operator::Expander::ExpandedWork(), IDsGenerator::generateUniqueExchangeID(), BlockStreamBuffer::getBlock(), PartitionedBlockBuffer::getBlock(), BlockStreamBuffer::getBlockInBuffer(), PartitionedBlockBuffer::getBlockInBuffer(), PartitionedBlockBuffer::getBlockNumberOfPartitionInBuffer(), MemoryChunkStore::getChunk(), claims::physical_operator::PhysicalOperator::GetContext(), claims::physical_operator::Expander::GetDegreeOfParallelism(), Daemon::getExecutedResult(), InMemoryChunkReaderItetaor::getNextBlockAccessor(), DiskChunkReaderIteraror::getNextBlockAccessor(), HDFSChunkReaderIterator::getNextBlockAccessor(), DynamicBlockBuffer::getNumberOfBlocks(), ExpanderTracker::getPerformanceInfo(), claims::logical_operator::LogicalCrossJoin::GetPlanContext(), claims::logical_operator::LogicalSubquery::GetPlanContext(), claims::logical_operator::LogicalScan::GetPlanContext(), claims::logical_operator::LogicalProject::GetPlanContext(), claims::logical_operator::LogicalQueryPlanRoot::GetPlanContext(), claims::logical_operator::LogicalFilter::GetPlanContext(), claims::logical_operator::LogicalSort::GetPlanContext(), claims::logical_operator::LogicalEqualJoin::GetPlanContext(), claims::logical_operator::LogicalAggregation::GetPlanContext(), Daemon::getRemoteCommand(), IDsGenerator::getUniqueExpanderID(), Comparator::iniatilize(), claims::physical_operator::PhysicalOperator::InitContext(), BlockStreamBuffer::insertBlock(), PartitionedBlockBuffer::insertBlockToPartitionedList(), ExpanderTracker::isExpandedThreadCallBack(), BlockManager::loadFromHdfs(), CodeGenerator::lock(), ExchangeTracker::LogoutExchange(), ExpanderTracker::monitoringThread(), claims::physical_operator::CombineTuple::Next(), claims::physical_operator::PhysicalAggregation::Next(), claims::physical_operator::PhysicalSort::Next(), ChunkReaderIterator::nextBlock(), InMemoryChunkReaderItetaor::nextBlock(), DiskChunkReaderIteraror::nextBlock(), HDFSChunkReaderIterator::nextBlock(), claims::physical_operator::PhysicalSort::Open(), AllBlockInfo::put(), MemoryChunkStore::putChunk(), ExchangeTracker::RegisterExchange(), claims::physical_operator::PhysicalOperator::RegisterExpandedThreadToAllBarriers(), ExpanderTracker::registerNewExpandedThreadStatus(), ExpanderTracker::registerNewExpander(), claims::physical_operator::Expander::RemoveFromCalledBackThreadList(), claims::physical_operator::Expander::RemoveFromWorkingThreadList(), MemoryChunkStore::returnChunk(), PortManager::returnPort(), BufferManager::returnStorageBudget(), claims::physical_operator::Expander::Shrink(), claims::physical_operator::Expander::TerminateWorkingThread(), ExpanderTracker::unregisterExpander(), and MemoryChunkStore::updateChunkInfo()\&.
.SS "void Lock::destroy ()\fC [inline]\fP"

.PP
References m\&.
.SS "void Lock::release ()\fC [inline]\fP"

.PP
References m\&.
.PP
Referenced by Daemon::addExecutedResult(), claims::physical_operator::Expander::AddIntoCalledBackThreadList(), claims::physical_operator::Expander::AddIntoWorkingThreadList(), ExpanderTracker::addNewStageEndpoint(), Daemon::addRemoteCommand(), TableIDAllocator::allocate_unique_table_id(), MemoryChunkStore::applyChunk(), PortManager::applyPort(), BufferManager::applyStorageDedget(), bottomLayerCollecting::askForNextBlock(), DynamicBlockBuffer::atomicAppendNewBlock(), DynamicBlockBuffer::Iterator::atomicNextBlock(), bottomLayerCollecting::AtomicPopBlockStream(), IndexScanIterator::AtomicPopBlockStream(), claims::physical_operator::InOperator::AtomicPopFreeBlockStream(), claims::physical_operator::InOperator::AtomicPopFreeHtBlockStream(), claims::physical_operator::CombineTuple::AtomicPopRemainingBlock(), bottomLayerCollecting::atomicPopRemainingBlock(), claims::physical_operator::InOperator::AtomicPopRemainingBlock(), IndexScanIterator::atomicPopRemainingBlock(), bottomLayerCollecting::AtomicPushBlockStream(), IndexScanIterator::AtomicPushBlockStream(), claims::physical_operator::InOperator::AtomicPushFreeBlockStream(), claims::physical_operator::InOperator::AtomicPushFreeHtBlockStream(), claims::physical_operator::CombineTuple::AtomicPushRemainingBlock(), bottomLayerCollecting::atomicPushRemainingBlock(), claims::physical_operator::InOperator::AtomicPushRemainingBlock(), IndexScanIterator::atomicPushRemainingBlock(), BlockStreamBuffer::BlockStreamBuffer(), ExpanderTracker::callbackExpandedThread(), claims::physical_operator::Expander::ChildExhausted(), ChunkStorage::createChunkReaderIterator(), claims::physical_operator::Expander::CreateWorkingThread(), TableIDAllocator::decrease_table_id(), ExpanderTracker::deleteExpandedThreadStatus(), BlockStreamBuffer::Empty(), claims::physical_operator::Expander::ExpandedWork(), IDsGenerator::generateUniqueExchangeID(), BlockStreamBuffer::getBlock(), PartitionedBlockBuffer::getBlock(), BlockStreamBuffer::getBlockInBuffer(), PartitionedBlockBuffer::getBlockInBuffer(), PartitionedBlockBuffer::getBlockNumberOfPartitionInBuffer(), MemoryChunkStore::getChunk(), claims::physical_operator::PhysicalOperator::GetContext(), claims::physical_operator::Expander::GetDegreeOfParallelism(), Daemon::getExecutedResult(), InMemoryChunkReaderItetaor::getNextBlockAccessor(), DiskChunkReaderIteraror::getNextBlockAccessor(), HDFSChunkReaderIterator::getNextBlockAccessor(), DynamicBlockBuffer::getNumberOfBlocks(), ExpanderTracker::getPerformanceInfo(), claims::logical_operator::LogicalCrossJoin::GetPlanContext(), claims::logical_operator::LogicalSubquery::GetPlanContext(), claims::logical_operator::LogicalScan::GetPlanContext(), claims::logical_operator::LogicalProject::GetPlanContext(), claims::logical_operator::LogicalQueryPlanRoot::GetPlanContext(), claims::logical_operator::LogicalFilter::GetPlanContext(), claims::logical_operator::LogicalSort::GetPlanContext(), claims::logical_operator::LogicalEqualJoin::GetPlanContext(), claims::logical_operator::LogicalAggregation::GetPlanContext(), Daemon::getRemoteCommand(), IDsGenerator::getUniqueExpanderID(), Comparator::iniatilize(), claims::physical_operator::PhysicalOperator::InitContext(), BlockStreamBuffer::insertBlock(), PartitionedBlockBuffer::insertBlockToPartitionedList(), ExpanderTracker::isExpandedThreadCallBack(), BlockManager::loadFromHdfs(), ExchangeTracker::LogoutExchange(), ExpanderTracker::monitoringThread(), claims::physical_operator::CombineTuple::Next(), claims::physical_operator::PhysicalAggregation::Next(), claims::physical_operator::PhysicalSort::Next(), ChunkReaderIterator::nextBlock(), InMemoryChunkReaderItetaor::nextBlock(), DiskChunkReaderIteraror::nextBlock(), HDFSChunkReaderIterator::nextBlock(), claims::physical_operator::PhysicalSort::Open(), AllBlockInfo::put(), MemoryChunkStore::putChunk(), ExchangeTracker::RegisterExchange(), claims::physical_operator::PhysicalOperator::RegisterExpandedThreadToAllBarriers(), ExpanderTracker::registerNewExpandedThreadStatus(), ExpanderTracker::registerNewExpander(), CodeGenerator::release(), claims::physical_operator::Expander::RemoveFromCalledBackThreadList(), claims::physical_operator::Expander::RemoveFromWorkingThreadList(), MemoryChunkStore::returnChunk(), PortManager::returnPort(), BufferManager::returnStorageBudget(), claims::physical_operator::Expander::Shrink(), claims::physical_operator::Expander::TerminateWorkingThread(), claims::physical_operator::PhysicalOperator::UnregisterExpandedThreadToAllBarriers(), ExpanderTracker::unregisterExpander(), and MemoryChunkStore::updateChunkInfo()\&.
.SS "bool Lock::try_acquire ()\fC [inline]\fP"

.PP
References m\&.
.PP
Referenced by claims::physical_operator::Expander::CreateWorkingThread()\&.
.SH "Member Data Documentation"
.PP 
.SS "pthread_mutex_t Lock::m\fC [private]\fP"

.PP
Referenced by acquire(), destroy(), Lock(), release(), try_acquire(), and ~Lock()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Claims from the source code\&.
