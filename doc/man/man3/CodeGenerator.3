.TH "CodeGenerator" 3 "Thu Nov 12 2015" "Claims" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CodeGenerator \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CodeGenerator\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fB~CodeGenerator\fP ()"
.br
.ti -1c
.RI "const Module * \fBgetModule\fP () const "
.br
.ti -1c
.RI "llvm::IRBuilder * \fBgetBuilder\fP () const "
.br
.ti -1c
.RI "FunctionPassManager * \fBgetFunctionPassManager\fP () const "
.br
.ti -1c
.RI "ExecutionEngine * \fBgetExecutionEngine\fP () const "
.br
.ti -1c
.RI "void \fBlock\fP ()"
.br
.ti -1c
.RI "void \fBrelease\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBCodeGenerator\fP * \fBgetInstance\fP ()"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBCodeGenerator\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBLock\fP \fBlock_\fP"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static llvm::IRBuilder * \fBbuilder_\fP =0"
.br
.ti -1c
.RI "static Module * \fBmodule_\fP =0"
.br
.ti -1c
.RI "static FunctionPassManager * \fBfpm_\fP =0"
.br
.ti -1c
.RI "static \fBCodeGenerator\fP * \fBinstance_\fP =0"
.br
.ti -1c
.RI "static ExecutionEngine * \fBengine_\fP =0"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "CodeGenerator::~CodeGenerator ()\fC [virtual]\fP"

.PP
References builder_, fpm_, instance_, module_, and NULL\&.
.SS "CodeGenerator::CodeGenerator ()\fC [private]\fP"

.PP
References builder_, engine_, fpm_, and module_\&.
.PP
Referenced by getInstance()\&.
.SH "Member Function Documentation"
.PP 
.SS "llvm::IRBuilder * CodeGenerator::getBuilder () const"

.PP
References builder_\&.
.PP
Referenced by codegen_binary_op(), codegen_column(), codegen_const(), createAdd(), CreateDateCompareFunc(), createDivide(), createEqual(), createGreat(), createGreatEqual(), createLess(), createLessEqual(), createMinus(), createMod(), createMultiply(), createNotEqual(), CreateNValueCompareFunc(), getExprLLVMFucn(), getExprLLVMFuncForTwoTuples(), getFilterProcessFunc(), getMemcat(), getMemcpy(), storeTheReturnValue(), myllvm::test1(), test_call(), TEST_F(), test_reference(), and typePromotion()\&.
.SS "ExecutionEngine * CodeGenerator::getExecutionEngine () const"

.PP
References engine_\&.
.PP
Referenced by getExprFunc(), getExprFuncTwoTuples(), getFilterProcessFunc(), getMemcat(), getMemcpy(), myllvm::test(), myllvm::test1(), test_call(), TEST_F(), and test_reference()\&.
.SS "FunctionPassManager * CodeGenerator::getFunctionPassManager () const"

.PP
References fpm_\&.
.PP
Referenced by getExprLLVMFucn(), getExprLLVMFuncForTwoTuples(), getFilterProcessFunc(), getMemcat(), getMemcpy(), and test_reference()\&.
.SS "\fBCodeGenerator\fP * CodeGenerator::getInstance ()\fC [static]\fP"

.PP
References CodeGenerator(), and instance_\&.
.PP
Referenced by codegen_binary_op(), codegen_column(), codegen_const(), createAdd(), CreateDateCompareFunc(), createDivide(), createEqual(), createGreat(), createGreatEqual(), createLess(), createLessEqual(), createMinus(), createMod(), createMultiply(), createNotEqual(), CreateNValueCompareFunc(), Environment::Environment(), get_another_one(), get_one(), getExprFunc(), getExprFuncTwoTuples(), getExprLLVMFucn(), getExprLLVMFuncForTwoTuples(), getFilterProcessFunc(), getMemcat(), getMemcpy(), CodeGenerationTest::SetUpTestCase(), storeTheReturnValue(), CodeGenerationTest::TearDownTestCase(), myllvm::test(), myllvm::test1(), test_call(), TEST_F(), test_reference(), and typePromotion()\&.
.SS "const Module * CodeGenerator::getModule () const"

.PP
References module_\&.
.PP
Referenced by CreateDateCompareFunc(), CreateNValueCompareFunc(), myllvm::test(), myllvm::test1(), and test_call()\&.
.SS "void CodeGenerator::lock ()"

.PP
References Lock::acquire(), and lock_\&.
.PP
Referenced by getExprFunc(), getExprFuncTwoTuples(), getFilterProcessFunc(), getMemcat(), and getMemcpy()\&.
.SS "void CodeGenerator::release ()"

.PP
References lock_, and Lock::release()\&.
.PP
Referenced by getExprFunc(), getExprFuncTwoTuples(), getExprLLVMFucn(), getExprLLVMFuncForTwoTuples(), getFilterProcessFunc(), getMemcat(), and getMemcpy()\&.
.SH "Member Data Documentation"
.PP 
.SS "llvm::IRBuilder * CodeGenerator::builder_ =0\fC [static]\fP, \fC [private]\fP"

.PP
Referenced by CodeGenerator(), getBuilder(), and ~CodeGenerator()\&.
.SS "ExecutionEngine * CodeGenerator::engine_ =0\fC [static]\fP, \fC [private]\fP"

.PP
Referenced by CodeGenerator(), and getExecutionEngine()\&.
.SS "FunctionPassManager * CodeGenerator::fpm_ =0\fC [static]\fP, \fC [private]\fP"

.PP
Referenced by CodeGenerator(), getFunctionPassManager(), and ~CodeGenerator()\&.
.SS "\fBCodeGenerator\fP * CodeGenerator::instance_ =0\fC [static]\fP, \fC [private]\fP"

.PP
Referenced by getInstance(), and ~CodeGenerator()\&.
.SS "\fBLock\fP CodeGenerator::lock_\fC [private]\fP"

.PP
Referenced by lock(), and release()\&.
.SS "Module * CodeGenerator::module_ =0\fC [static]\fP, \fC [private]\fP"

.PP
Referenced by CodeGenerator(), getModule(), and ~CodeGenerator()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Claims from the source code\&.
