.TH "Partitioner" 3 "Thu Nov 12 2015" "Claims" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Partitioner \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Partitioner\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPartitioner\fP ()"
.br
.ti -1c
.RI "\fBPartitioner\fP (\fBProjectionID\fP projection_id, unsigned number_of_partitions, \fBPartitionFunction\fP *partition_functin)"
.br
.ti -1c
.RI "\fBPartitioner\fP (\fBProjectionID\fP projection_id, unsigned number_of_partitions, const \fBAttribute\fP &partition_key, \fBPartitionFunction\fP *partition_functin)"
.br
.ti -1c
.RI "virtual \fB~Partitioner\fP ()"
.br
.ti -1c
.RI "unsigned \fBgetNumberOfPartitions\fP () const "
.br
.ti -1c
.RI "bool \fBbindPartitionToNode\fP (\fBPartitionOffset\fP partition_id, \fBNodeID\fP target_node)"
.br
.ti -1c
.RI "void \fBunbindPartitionToNode\fP (\fBPartitionOffset\fP partition_id)"
.br
.ti -1c
.RI "void \fBRegisterPartition\fP (unsigned partitoin_key, unsigned number_of_chunks)"
.br
.ti -1c
.RI "void \fBRegisterPartitionWithNumberOfBlocks\fP (unsigned partitoin_key, unsigned long number_of_blocks)"
.br
.ti -1c
.RI "void \fBUpdatePartitionWithNumberOfChunksToBlockManager\fP (unsigned partitoin_offset, unsigned long number_of_blocks)"
.br
.ti -1c
.RI "unsigned \fBgetPartitionDataSize\fP (unsigned partitoin_index) const "
.br
.ti -1c
.RI "unsigned long \fBgetPartitionCardinality\fP (unsigned partitoin_index) const "
.br
.ti -1c
.RI "unsigned \fBgetPartitionBlocks\fP (unsigned partitoin_index) const "
.br
.ti -1c
.RI "unsigned \fBgetPartitionChunks\fP (unsigned partition_index) const "
.br
.ti -1c
.RI "\fBNodeID\fP \fBgetPartitionLocation\fP (unsigned partition_offset) const "
.br
.ti -1c
.RI "void \fBprint\fP ()"
.br
.ti -1c
.RI "bool \fBhasSamePartitionLocation\fP (const \fBPartitioner\fP &target_partition) const "
.br
.ti -1c
.RI "\fBbinding_mode\fP \fBget_binding_mode_\fP () const "
.br
.ti -1c
.RI "\fBPartitionFunction::PartitionStyle\fP \fBgetPartitionFashion\fP () const "
.br
.ti -1c
.RI "\fBAttribute\fP \fBgetPartitionKey\fP () const "
.br
.ti -1c
.RI "\fBPartitionFunction\fP * \fBgetPartitionFunction\fP () const "
.br
.ti -1c
.RI "\fBProjectionID\fP \fBgetProejctionID\fP () const "
.br
.ti -1c
.RI "bool \fBallPartitionBound\fP () const "
.br
.ti -1c
.RI "vector< \fBPartitionID\fP > \fBgetPartitionIDList\fP ()"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "template<class Archive > void \fBserialize\fP (Archive &ar, const unsigned int version)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBAttribute\fP * \fBpartition_key_\fP"
.br
.ti -1c
.RI "\fBPartitionFunction\fP * \fBpartition_function_\fP"
.br
.ti -1c
.RI "unsigned \fBnumber_of_partitions_\fP"
.br
.ti -1c
.RI "vector< \fBPartitionInfo\fP * > \fBpartition_info_list\fP"
.br
.ti -1c
.RI "\fBbinding_mode\fP \fBmode_\fP"
.br
.ti -1c
.RI "\fBProjectionID\fP \fBprojection_id_\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBboost::serialization::access\fP"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Partitioner::Partitioner ()\fC [inline]\fP"

.SS "Partitioner::Partitioner (\fBProjectionID\fPprojection_id, unsignednumber_of_partitions, \fBPartitionFunction\fP *partition_functin)"

.SS "Partitioner::Partitioner (\fBProjectionID\fPprojection_id, unsignednumber_of_partitions, const \fBAttribute\fP &partition_key, \fBPartitionFunction\fP *partition_functin)"

.PP
References partition_info_list, partition_key_, and projection_id_\&.
.SS "Partitioner::~Partitioner ()\fC [virtual]\fP"

.SH "Member Function Documentation"
.PP 
.SS "bool Partitioner::allPartitionBound () const"

.PP
References number_of_partitions_, and partition_info_list\&.
.PP
Referenced by ProjectionDescriptor::AllPartitionBound(), and HdfsLoader::load()\&.
.SS "bool Partitioner::bindPartitionToNode (\fBPartitionOffset\fPpartition_id, \fBNodeID\fPtarget_node)"

.PP
References partition_info_list\&.
.PP
Referenced by ProjectionBinding::BindingEntireProjection()\&.
.SS "\fBbinding_mode\fP Partitioner::get_binding_mode_ () const\fC [inline]\fP"

.PP
Referenced by ProjectionBinding::BindingEntireProjection(), hasSamePartitionLocation(), and ProjectionBinding::UnbindingEntireProjection()\&.
.SS "unsigned Partitioner::getNumberOfPartitions () const"

.PP
References PartitionFunction::getNumberOfPartitions(), and partition_function_\&.
.PP
Referenced by HdfsLoader::append(), ProjectionBinding::BindingEntireProjection(), BindingTest(), create_poc_data_four_partitions(), create_poc_data_one_partitions(), CreateProjection(), execting_test(), hasSamePartitionLocation(), HdfsLoader::HdfsLoader(), init_multi_node_tpc_h_envoriment_(), init_poc_environment(), init_single_node_tpc_h_envoriment_(), init_single_node_tpc_h_envoriment_ing(), init_single_node_tpc_h_envoriment_sort(), init_tt_environment(), HdfsLoader::load(), loadData(), claims::logical_operator::PlanPartitioner::PlanPartitioner(), RegisterPartition(), RegisterPartitionWithNumberOfBlocks(), startup_catalog(), startup_mulitple_node_environment_of_poc(), startup_multiple_node_environment(), startup_multiple_node_environment_of_stock(), startup_multiple_node_environment_of_tpch(), startup_single_node_environment_of_tpch(), startup_single_node_one_partition_environment_of_tpch(), statistic_manager_test(), test_CSBIndexBuilding(), test_index_scan_iterator(), test_logical_csb_index_building(), ProjectionBinding::UnbindingEntireProjection(), UpdatePartitionWithNumberOfChunksToBlockManager(), and variable_schema_test()\&.
.SS "unsigned Partitioner::getPartitionBlocks (unsignedpartitoin_index) const"

.PP
References partition_info_list\&.
.PP
Referenced by HdfsLoader::HdfsLoader()\&.
.SS "unsigned long Partitioner::getPartitionCardinality (unsignedpartitoin_index) const"

.PP
References partition_info_list\&.
.PP
Referenced by ProjectionDescriptor::getNumberOfTuplesOnPartition(), HdfsLoader::HdfsLoader(), and claims::logical_operator::PlanPartitioner::PlanPartitioner()\&.
.SS "unsigned Partitioner::getPartitionChunks (unsignedpartition_index) const"

.PP
References partition_info_list\&.
.PP
Referenced by ProjectionBinding::BindingEntireProjection()\&.
.SS "unsigned Partitioner::getPartitionDataSize (unsignedpartitoin_index) const"

.PP
References BLOCKSIZE_IN_KB, and partition_info_list\&.
.PP
Referenced by ProjectionBinding::BindingEntireProjection(), and ProjectionBinding::UnbindingEntireProjection()\&.
.SS "\fBPartitionFunction::PartitionStyle\fP Partitioner::getPartitionFashion () const"

.PP
References PartitionFunction::getPartitionFashion(), and partition_function_\&.
.PP
Referenced by claims::logical_operator::LogicalEqualJoin::IsHashOnLeftKey()\&.
.SS "\fBPartitionFunction\fP * Partitioner::getPartitionFunction () const"

.PP
References partition_function_\&.
.PP
Referenced by HdfsLoader::HdfsLoader(), and claims::logical_operator::PlanPartitioner::PlanPartitioner()\&.
.SS "vector< \fBPartitionID\fP > Partitioner::getPartitionIDList ()"

.PP
References partition_info_list\&.
.PP
Referenced by Catalog::getPartitionIDList()\&.
.SS "\fBAttribute\fP Partitioner::getPartitionKey () const"

.PP
References partition_key_\&.
.PP
Referenced by HdfsLoader::HdfsLoader(), claims::logical_operator::LogicalEqualJoin::IsHashOnLeftKey(), and claims::logical_operator::PlanPartitioner::PlanPartitioner()\&.
.SS "\fBNodeID\fP Partitioner::getPartitionLocation (unsignedpartition_offset) const"

.PP
References OneToOne, and partition_info_list\&.
.PP
Referenced by claims::logical_operator::PlanPartitioner::PlanPartitioner(), and ProjectionBinding::UnbindingEntireProjection()\&.
.SS "\fBProjectionID\fP Partitioner::getProejctionID () const"

.PP
References projection_id_\&.
.PP
Referenced by ProjectionBinding::BindingEntireProjection(), and ProjectionBinding::UnbindingEntireProjection()\&.
.SS "bool Partitioner::hasSamePartitionLocation (const \fBPartitioner\fP &target_partition) const"
in the current version, any the location detection in OneToMany mode is ommited\&. 
.PP
References get_binding_mode_(), getNumberOfPartitions(), mode_, OneToMany, and partition_info_list\&.
.SS "void Partitioner::print ()"

.SS "void Partitioner::RegisterPartition (unsignedpartitoin_key, unsignednumber_of_chunks)"

.PP
References getNumberOfPartitions(), and partition_info_list\&.
.PP
Referenced by BindingTest(), create_poc_data_four_partitions(), create_poc_data_one_partitions(), CreateProjection(), execting_test(), init_multi_node_tpc_h_envoriment_(), init_poc_environment(), init_single_node_tpc_h_envoriment_(), init_single_node_tpc_h_envoriment_ing(), init_single_node_tpc_h_envoriment_sort(), init_tt_environment(), loadData(), startup_catalog(), startup_mulitple_node_environment_of_poc(), startup_multiple_node_environment(), startup_multiple_node_environment_of_stock(), startup_multiple_node_environment_of_tpch(), startup_single_node_environment_of_tpch(), startup_single_node_one_partition_environment_of_tpch(), statistic_manager_test(), test_CSBIndexBuilding(), test_index_scan_iterator(), test_logical_csb_index_building(), and variable_schema_test()\&.
.SS "void Partitioner::RegisterPartitionWithNumberOfBlocks (unsignedpartitoin_key, unsigned longnumber_of_blocks)"

.PP
References getNumberOfPartitions(), and partition_info_list\&.
.PP
Referenced by HdfsLoader::append(), and HdfsLoader::load()\&.
.SS "template<class Archive > void Partitioner::serialize (Archive &ar, const unsigned intversion)\fC [inline]\fP, \fC [private]\fP"

.PP
References NULL\&.
.SS "void Partitioner::unbindPartitionToNode (\fBPartitionOffset\fPpartition_id)"

.PP
References partition_info_list\&.
.PP
Referenced by ProjectionBinding::UnbindingEntireProjection()\&.
.SS "void Partitioner::UpdatePartitionWithNumberOfChunksToBlockManager (unsignedpartitoin_offset, unsigned longnumber_of_blocks)"

.PP
References BlockManagerMaster::getInstance(), getNumberOfPartitions(), MEMORY, mode_, OneToOne, partition_info_list, and BlockManagerMaster::SendBindingMessage()\&.
.PP
Referenced by HdfsLoader::append(), and HdfsLoader::load()\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class boost::serialization::access\fC [friend]\fP"

.SH "Member Data Documentation"
.PP 
.SS "\fBbinding_mode\fP Partitioner::mode_\fC [private]\fP"

.PP
Referenced by hasSamePartitionLocation(), and UpdatePartitionWithNumberOfChunksToBlockManager()\&.
.SS "unsigned Partitioner::number_of_partitions_\fC [private]\fP"

.PP
Referenced by allPartitionBound()\&.
.SS "\fBPartitionFunction\fP* Partitioner::partition_function_\fC [private]\fP"

.PP
Referenced by getNumberOfPartitions(), getPartitionFashion(), and getPartitionFunction()\&.
.SS "vector<\fBPartitionInfo\fP*> Partitioner::partition_info_list\fC [private]\fP"
partition_info_list is a list, each element corresponds to a single partition and maintains the number of blocks in the partition as well as the binding location\&. 
.PP
Referenced by allPartitionBound(), bindPartitionToNode(), getPartitionBlocks(), getPartitionCardinality(), getPartitionChunks(), getPartitionDataSize(), getPartitionIDList(), getPartitionLocation(), hasSamePartitionLocation(), Partitioner(), RegisterPartition(), RegisterPartitionWithNumberOfBlocks(), unbindPartitionToNode(), and UpdatePartitionWithNumberOfChunksToBlockManager()\&.
.SS "\fBAttribute\fP* Partitioner::partition_key_\fC [private]\fP"

.PP
Referenced by getPartitionKey(), and Partitioner()\&.
.SS "\fBProjectionID\fP Partitioner::projection_id_\fC [private]\fP"

.PP
Referenced by getProejctionID(), and Partitioner()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Claims from the source code\&.
